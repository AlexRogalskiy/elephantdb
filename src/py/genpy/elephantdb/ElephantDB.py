#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
import sys
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def get(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    pass

  def getString(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    pass

  def getInt(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    pass

  def getLong(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    pass

  def multiGet(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    pass

  def multiGetString(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    pass

  def multiGetInt(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    pass

  def multiGetLong(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    pass

  def directMultiGet(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    pass

  def getDomainStatus(self, domain):
    """
    Parameters:
     - domain
    """
    pass

  def getDomains(self, ):
    pass

  def getStatus(self, ):
    pass

  def isFullyLoaded(self, ):
    pass

  def isUpdating(self, ):
    pass

  def updateAll(self, ):
    pass

  def update(self, domain):
    """
    Parameters:
     - domain
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def get(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    self.send_get(domain, key)
    return self.recv_get()

  def send_get(self, domain, key):
    self._oprot.writeMessageBegin('get', TMessageType.CALL, self._seqid)
    args = get_args()
    args.domain = domain
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.dnfe != None:
      raise result.dnfe
    if result.hde != None:
      raise result.hde
    if result.dnle != None:
      raise result.dnle
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get failed: unknown result");

  def getString(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    self.send_getString(domain, key)
    return self.recv_getString()

  def send_getString(self, domain, key):
    self._oprot.writeMessageBegin('getString', TMessageType.CALL, self._seqid)
    args = getString_args()
    args.domain = domain
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getString(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getString_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.dnfe != None:
      raise result.dnfe
    if result.hde != None:
      raise result.hde
    if result.dnle != None:
      raise result.dnle
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getString failed: unknown result");

  def getInt(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    self.send_getInt(domain, key)
    return self.recv_getInt()

  def send_getInt(self, domain, key):
    self._oprot.writeMessageBegin('getInt', TMessageType.CALL, self._seqid)
    args = getInt_args()
    args.domain = domain
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getInt(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getInt_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.dnfe != None:
      raise result.dnfe
    if result.hde != None:
      raise result.hde
    if result.dnle != None:
      raise result.dnle
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getInt failed: unknown result");

  def getLong(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    self.send_getLong(domain, key)
    return self.recv_getLong()

  def send_getLong(self, domain, key):
    self._oprot.writeMessageBegin('getLong', TMessageType.CALL, self._seqid)
    args = getLong_args()
    args.domain = domain
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getLong(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getLong_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.dnfe != None:
      raise result.dnfe
    if result.hde != None:
      raise result.hde
    if result.dnle != None:
      raise result.dnle
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getLong failed: unknown result");

  def multiGet(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    self.send_multiGet(domain, key)
    return self.recv_multiGet()

  def send_multiGet(self, domain, key):
    self._oprot.writeMessageBegin('multiGet', TMessageType.CALL, self._seqid)
    args = multiGet_args()
    args.domain = domain
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_multiGet(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = multiGet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.dnfe != None:
      raise result.dnfe
    if result.hde != None:
      raise result.hde
    if result.dnle != None:
      raise result.dnle
    raise TApplicationException(TApplicationException.MISSING_RESULT, "multiGet failed: unknown result");

  def multiGetString(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    self.send_multiGetString(domain, key)
    return self.recv_multiGetString()

  def send_multiGetString(self, domain, key):
    self._oprot.writeMessageBegin('multiGetString', TMessageType.CALL, self._seqid)
    args = multiGetString_args()
    args.domain = domain
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_multiGetString(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = multiGetString_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.dnfe != None:
      raise result.dnfe
    if result.hde != None:
      raise result.hde
    if result.dnle != None:
      raise result.dnle
    raise TApplicationException(TApplicationException.MISSING_RESULT, "multiGetString failed: unknown result");

  def multiGetInt(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    self.send_multiGetInt(domain, key)
    return self.recv_multiGetInt()

  def send_multiGetInt(self, domain, key):
    self._oprot.writeMessageBegin('multiGetInt', TMessageType.CALL, self._seqid)
    args = multiGetInt_args()
    args.domain = domain
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_multiGetInt(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = multiGetInt_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.dnfe != None:
      raise result.dnfe
    if result.hde != None:
      raise result.hde
    if result.dnle != None:
      raise result.dnle
    raise TApplicationException(TApplicationException.MISSING_RESULT, "multiGetInt failed: unknown result");

  def multiGetLong(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    self.send_multiGetLong(domain, key)
    return self.recv_multiGetLong()

  def send_multiGetLong(self, domain, key):
    self._oprot.writeMessageBegin('multiGetLong', TMessageType.CALL, self._seqid)
    args = multiGetLong_args()
    args.domain = domain
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_multiGetLong(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = multiGetLong_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.dnfe != None:
      raise result.dnfe
    if result.hde != None:
      raise result.hde
    if result.dnle != None:
      raise result.dnle
    raise TApplicationException(TApplicationException.MISSING_RESULT, "multiGetLong failed: unknown result");

  def directMultiGet(self, domain, key):
    """
    Parameters:
     - domain
     - key
    """
    self.send_directMultiGet(domain, key)
    return self.recv_directMultiGet()

  def send_directMultiGet(self, domain, key):
    self._oprot.writeMessageBegin('directMultiGet', TMessageType.CALL, self._seqid)
    args = directMultiGet_args()
    args.domain = domain
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_directMultiGet(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = directMultiGet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.dnfe != None:
      raise result.dnfe
    if result.dnle != None:
      raise result.dnle
    if result.whe != None:
      raise result.whe
    raise TApplicationException(TApplicationException.MISSING_RESULT, "directMultiGet failed: unknown result");

  def getDomainStatus(self, domain):
    """
    Parameters:
     - domain
    """
    self.send_getDomainStatus(domain)
    return self.recv_getDomainStatus()

  def send_getDomainStatus(self, domain):
    self._oprot.writeMessageBegin('getDomainStatus', TMessageType.CALL, self._seqid)
    args = getDomainStatus_args()
    args.domain = domain
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDomainStatus(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDomainStatus_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDomainStatus failed: unknown result");

  def getDomains(self, ):
    self.send_getDomains()
    return self.recv_getDomains()

  def send_getDomains(self, ):
    self._oprot.writeMessageBegin('getDomains', TMessageType.CALL, self._seqid)
    args = getDomains_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDomains(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDomains_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDomains failed: unknown result");

  def getStatus(self, ):
    self.send_getStatus()
    return self.recv_getStatus()

  def send_getStatus(self, ):
    self._oprot.writeMessageBegin('getStatus', TMessageType.CALL, self._seqid)
    args = getStatus_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getStatus(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getStatus_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getStatus failed: unknown result");

  def isFullyLoaded(self, ):
    self.send_isFullyLoaded()
    return self.recv_isFullyLoaded()

  def send_isFullyLoaded(self, ):
    self._oprot.writeMessageBegin('isFullyLoaded', TMessageType.CALL, self._seqid)
    args = isFullyLoaded_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isFullyLoaded(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = isFullyLoaded_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isFullyLoaded failed: unknown result");

  def isUpdating(self, ):
    self.send_isUpdating()
    return self.recv_isUpdating()

  def send_isUpdating(self, ):
    self._oprot.writeMessageBegin('isUpdating', TMessageType.CALL, self._seqid)
    args = isUpdating_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isUpdating(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = isUpdating_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isUpdating failed: unknown result");

  def updateAll(self, ):
    self.send_updateAll()
    self.recv_updateAll()

  def send_updateAll(self, ):
    self._oprot.writeMessageBegin('updateAll', TMessageType.CALL, self._seqid)
    args = updateAll_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateAll(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateAll_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ice != None:
      raise result.ice
    return

  def update(self, domain):
    """
    Parameters:
     - domain
    """
    self.send_update(domain)
    return self.recv_update()

  def send_update(self, domain):
    self._oprot.writeMessageBegin('update', TMessageType.CALL, self._seqid)
    args = update_args()
    args.domain = domain
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_update(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = update_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "update failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["get"] = Processor.process_get
    self._processMap["getString"] = Processor.process_getString
    self._processMap["getInt"] = Processor.process_getInt
    self._processMap["getLong"] = Processor.process_getLong
    self._processMap["multiGet"] = Processor.process_multiGet
    self._processMap["multiGetString"] = Processor.process_multiGetString
    self._processMap["multiGetInt"] = Processor.process_multiGetInt
    self._processMap["multiGetLong"] = Processor.process_multiGetLong
    self._processMap["directMultiGet"] = Processor.process_directMultiGet
    self._processMap["getDomainStatus"] = Processor.process_getDomainStatus
    self._processMap["getDomains"] = Processor.process_getDomains
    self._processMap["getStatus"] = Processor.process_getStatus
    self._processMap["isFullyLoaded"] = Processor.process_isFullyLoaded
    self._processMap["isUpdating"] = Processor.process_isUpdating
    self._processMap["updateAll"] = Processor.process_updateAll
    self._processMap["update"] = Processor.process_update

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_get(self, seqid, iprot, oprot):
    args = get_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_result()
    try:
      result.success = self._handler.get(args.domain, args.key)
    except DomainNotFoundException, dnfe:
      result.dnfe = dnfe
    except HostsDownException, hde:
      result.hde = hde
    except DomainNotLoadedException, dnle:
      result.dnle = dnle
    oprot.writeMessageBegin("get", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getString(self, seqid, iprot, oprot):
    args = getString_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getString_result()
    try:
      result.success = self._handler.getString(args.domain, args.key)
    except DomainNotFoundException, dnfe:
      result.dnfe = dnfe
    except HostsDownException, hde:
      result.hde = hde
    except DomainNotLoadedException, dnle:
      result.dnle = dnle
    oprot.writeMessageBegin("getString", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getInt(self, seqid, iprot, oprot):
    args = getInt_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getInt_result()
    try:
      result.success = self._handler.getInt(args.domain, args.key)
    except DomainNotFoundException, dnfe:
      result.dnfe = dnfe
    except HostsDownException, hde:
      result.hde = hde
    except DomainNotLoadedException, dnle:
      result.dnle = dnle
    oprot.writeMessageBegin("getInt", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getLong(self, seqid, iprot, oprot):
    args = getLong_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getLong_result()
    try:
      result.success = self._handler.getLong(args.domain, args.key)
    except DomainNotFoundException, dnfe:
      result.dnfe = dnfe
    except HostsDownException, hde:
      result.hde = hde
    except DomainNotLoadedException, dnle:
      result.dnle = dnle
    oprot.writeMessageBegin("getLong", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_multiGet(self, seqid, iprot, oprot):
    args = multiGet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = multiGet_result()
    try:
      result.success = self._handler.multiGet(args.domain, args.key)
    except DomainNotFoundException, dnfe:
      result.dnfe = dnfe
    except HostsDownException, hde:
      result.hde = hde
    except DomainNotLoadedException, dnle:
      result.dnle = dnle
    oprot.writeMessageBegin("multiGet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_multiGetString(self, seqid, iprot, oprot):
    args = multiGetString_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = multiGetString_result()
    try:
      result.success = self._handler.multiGetString(args.domain, args.key)
    except DomainNotFoundException, dnfe:
      result.dnfe = dnfe
    except HostsDownException, hde:
      result.hde = hde
    except DomainNotLoadedException, dnle:
      result.dnle = dnle
    oprot.writeMessageBegin("multiGetString", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_multiGetInt(self, seqid, iprot, oprot):
    args = multiGetInt_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = multiGetInt_result()
    try:
      result.success = self._handler.multiGetInt(args.domain, args.key)
    except DomainNotFoundException, dnfe:
      result.dnfe = dnfe
    except HostsDownException, hde:
      result.hde = hde
    except DomainNotLoadedException, dnle:
      result.dnle = dnle
    oprot.writeMessageBegin("multiGetInt", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_multiGetLong(self, seqid, iprot, oprot):
    args = multiGetLong_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = multiGetLong_result()
    try:
      result.success = self._handler.multiGetLong(args.domain, args.key)
    except DomainNotFoundException, dnfe:
      result.dnfe = dnfe
    except HostsDownException, hde:
      result.hde = hde
    except DomainNotLoadedException, dnle:
      result.dnle = dnle
    oprot.writeMessageBegin("multiGetLong", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_directMultiGet(self, seqid, iprot, oprot):
    args = directMultiGet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = directMultiGet_result()
    try:
      result.success = self._handler.directMultiGet(args.domain, args.key)
    except DomainNotFoundException, dnfe:
      result.dnfe = dnfe
    except DomainNotLoadedException, dnle:
      result.dnle = dnle
    except WrongHostException, whe:
      result.whe = whe
    oprot.writeMessageBegin("directMultiGet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDomainStatus(self, seqid, iprot, oprot):
    args = getDomainStatus_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDomainStatus_result()
    result.success = self._handler.getDomainStatus(args.domain)
    oprot.writeMessageBegin("getDomainStatus", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDomains(self, seqid, iprot, oprot):
    args = getDomains_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDomains_result()
    result.success = self._handler.getDomains()
    oprot.writeMessageBegin("getDomains", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getStatus(self, seqid, iprot, oprot):
    args = getStatus_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getStatus_result()
    result.success = self._handler.getStatus()
    oprot.writeMessageBegin("getStatus", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_isFullyLoaded(self, seqid, iprot, oprot):
    args = isFullyLoaded_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isFullyLoaded_result()
    result.success = self._handler.isFullyLoaded()
    oprot.writeMessageBegin("isFullyLoaded", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_isUpdating(self, seqid, iprot, oprot):
    args = isUpdating_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isUpdating_result()
    result.success = self._handler.isUpdating()
    oprot.writeMessageBegin("isUpdating", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateAll(self, seqid, iprot, oprot):
    args = updateAll_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateAll_result()
    try:
      self._handler.updateAll()
    except InvalidConfigurationException, ice:
      result.ice = ice
    oprot.writeMessageBegin("updateAll", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_update(self, seqid, iprot, oprot):
    args = update_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = update_result()
    result.success = self._handler.update(args.domain)
    oprot.writeMessageBegin("update", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class get_args:
  """
  Attributes:
   - domain
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.STRING, 'key', None, None, ), # 2
  )

  def __init__(self, domain=None, key=None,):
    self.domain = domain
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    if self.key != None:
      oprot.writeFieldBegin('key', TType.STRING, 2)
      oprot.writeString(self.key);
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class get_result:
  """
  Attributes:
   - success
   - dnfe
   - hde
   - dnle
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Value, Value.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'dnfe', (DomainNotFoundException, DomainNotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'hde', (HostsDownException, HostsDownException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'dnle', (DomainNotLoadedException, DomainNotLoadedException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, dnfe=None, hde=None, dnle=None,):
    self.success = success
    self.dnfe = dnfe
    self.hde = hde
    self.dnle = dnle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Value()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dnfe = DomainNotFoundException()
          self.dnfe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.hde = HostsDownException()
          self.hde.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.dnle = DomainNotLoadedException()
          self.dnle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.dnfe != None:
      oprot.writeFieldBegin('dnfe', TType.STRUCT, 1)
      self.dnfe.write(oprot)
      oprot.writeFieldEnd()
    if self.hde != None:
      oprot.writeFieldBegin('hde', TType.STRUCT, 2)
      self.hde.write(oprot)
      oprot.writeFieldEnd()
    if self.dnle != None:
      oprot.writeFieldBegin('dnle', TType.STRUCT, 3)
      self.dnle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getString_args:
  """
  Attributes:
   - domain
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.STRING, 'key', None, None, ), # 2
  )

  def __init__(self, domain=None, key=None,):
    self.domain = domain
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.key = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getString_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    if self.key != None:
      oprot.writeFieldBegin('key', TType.STRING, 2)
      oprot.writeString(self.key.encode('utf-8'));
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getString_result:
  """
  Attributes:
   - success
   - dnfe
   - hde
   - dnle
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Value, Value.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'dnfe', (DomainNotFoundException, DomainNotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'hde', (HostsDownException, HostsDownException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'dnle', (DomainNotLoadedException, DomainNotLoadedException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, dnfe=None, hde=None, dnle=None,):
    self.success = success
    self.dnfe = dnfe
    self.hde = hde
    self.dnle = dnle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Value()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dnfe = DomainNotFoundException()
          self.dnfe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.hde = HostsDownException()
          self.hde.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.dnle = DomainNotLoadedException()
          self.dnle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getString_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.dnfe != None:
      oprot.writeFieldBegin('dnfe', TType.STRUCT, 1)
      self.dnfe.write(oprot)
      oprot.writeFieldEnd()
    if self.hde != None:
      oprot.writeFieldBegin('hde', TType.STRUCT, 2)
      self.hde.write(oprot)
      oprot.writeFieldEnd()
    if self.dnle != None:
      oprot.writeFieldBegin('dnle', TType.STRUCT, 3)
      self.dnle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getInt_args:
  """
  Attributes:
   - domain
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.I32, 'key', None, None, ), # 2
  )

  def __init__(self, domain=None, key=None,):
    self.domain = domain
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.key = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getInt_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    if self.key != None:
      oprot.writeFieldBegin('key', TType.I32, 2)
      oprot.writeI32(self.key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getInt_result:
  """
  Attributes:
   - success
   - dnfe
   - hde
   - dnle
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Value, Value.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'dnfe', (DomainNotFoundException, DomainNotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'hde', (HostsDownException, HostsDownException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'dnle', (DomainNotLoadedException, DomainNotLoadedException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, dnfe=None, hde=None, dnle=None,):
    self.success = success
    self.dnfe = dnfe
    self.hde = hde
    self.dnle = dnle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Value()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dnfe = DomainNotFoundException()
          self.dnfe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.hde = HostsDownException()
          self.hde.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.dnle = DomainNotLoadedException()
          self.dnle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getInt_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.dnfe != None:
      oprot.writeFieldBegin('dnfe', TType.STRUCT, 1)
      self.dnfe.write(oprot)
      oprot.writeFieldEnd()
    if self.hde != None:
      oprot.writeFieldBegin('hde', TType.STRUCT, 2)
      self.hde.write(oprot)
      oprot.writeFieldEnd()
    if self.dnle != None:
      oprot.writeFieldBegin('dnle', TType.STRUCT, 3)
      self.dnle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getLong_args:
  """
  Attributes:
   - domain
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.I64, 'key', None, None, ), # 2
  )

  def __init__(self, domain=None, key=None,):
    self.domain = domain
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.key = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getLong_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    if self.key != None:
      oprot.writeFieldBegin('key', TType.I64, 2)
      oprot.writeI64(self.key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getLong_result:
  """
  Attributes:
   - success
   - dnfe
   - hde
   - dnle
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Value, Value.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'dnfe', (DomainNotFoundException, DomainNotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'hde', (HostsDownException, HostsDownException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'dnle', (DomainNotLoadedException, DomainNotLoadedException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, dnfe=None, hde=None, dnle=None,):
    self.success = success
    self.dnfe = dnfe
    self.hde = hde
    self.dnle = dnle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Value()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dnfe = DomainNotFoundException()
          self.dnfe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.hde = HostsDownException()
          self.hde.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.dnle = DomainNotLoadedException()
          self.dnle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getLong_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.dnfe != None:
      oprot.writeFieldBegin('dnfe', TType.STRUCT, 1)
      self.dnfe.write(oprot)
      oprot.writeFieldEnd()
    if self.hde != None:
      oprot.writeFieldBegin('hde', TType.STRUCT, 2)
      self.hde.write(oprot)
      oprot.writeFieldEnd()
    if self.dnle != None:
      oprot.writeFieldBegin('dnle', TType.STRUCT, 3)
      self.dnle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class multiGet_args:
  """
  Attributes:
   - domain
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.LIST, 'key', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, domain=None, key=None,):
    self.domain = domain
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.key = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = iprot.readString();
            self.key.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multiGet_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    if self.key != None:
      oprot.writeFieldBegin('key', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.key))
      for iter29 in self.key:
        oprot.writeString(iter29);
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class multiGet_result:
  """
  Attributes:
   - success
   - dnfe
   - hde
   - dnle
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Value, Value.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'dnfe', (DomainNotFoundException, DomainNotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'hde', (HostsDownException, HostsDownException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'dnle', (DomainNotLoadedException, DomainNotLoadedException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, dnfe=None, hde=None, dnle=None,):
    self.success = success
    self.dnfe = dnfe
    self.hde = hde
    self.dnle = dnle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = Value()
            _elem35.read(iprot)
            self.success.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dnfe = DomainNotFoundException()
          self.dnfe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.hde = HostsDownException()
          self.hde.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.dnle = DomainNotLoadedException()
          self.dnle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multiGet_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter36 in self.success:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dnfe != None:
      oprot.writeFieldBegin('dnfe', TType.STRUCT, 1)
      self.dnfe.write(oprot)
      oprot.writeFieldEnd()
    if self.hde != None:
      oprot.writeFieldBegin('hde', TType.STRUCT, 2)
      self.hde.write(oprot)
      oprot.writeFieldEnd()
    if self.dnle != None:
      oprot.writeFieldBegin('dnle', TType.STRUCT, 3)
      self.dnle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class multiGetString_args:
  """
  Attributes:
   - domain
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.LIST, 'key', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, domain=None, key=None,):
    self.domain = domain
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.key = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = iprot.readString().decode('utf-8');
            self.key.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multiGetString_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    if self.key != None:
      oprot.writeFieldBegin('key', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.key))
      for iter43 in self.key:
        oprot.writeString(iter43.encode('utf-8'));
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class multiGetString_result:
  """
  Attributes:
   - success
   - dnfe
   - hde
   - dnle
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Value, Value.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'dnfe', (DomainNotFoundException, DomainNotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'hde', (HostsDownException, HostsDownException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'dnle', (DomainNotLoadedException, DomainNotLoadedException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, dnfe=None, hde=None, dnle=None,):
    self.success = success
    self.dnfe = dnfe
    self.hde = hde
    self.dnle = dnle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype47, _size44) = iprot.readListBegin()
          for _i48 in xrange(_size44):
            _elem49 = Value()
            _elem49.read(iprot)
            self.success.append(_elem49)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dnfe = DomainNotFoundException()
          self.dnfe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.hde = HostsDownException()
          self.hde.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.dnle = DomainNotLoadedException()
          self.dnle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multiGetString_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter50 in self.success:
        iter50.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dnfe != None:
      oprot.writeFieldBegin('dnfe', TType.STRUCT, 1)
      self.dnfe.write(oprot)
      oprot.writeFieldEnd()
    if self.hde != None:
      oprot.writeFieldBegin('hde', TType.STRUCT, 2)
      self.hde.write(oprot)
      oprot.writeFieldEnd()
    if self.dnle != None:
      oprot.writeFieldBegin('dnle', TType.STRUCT, 3)
      self.dnle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class multiGetInt_args:
  """
  Attributes:
   - domain
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.LIST, 'key', (TType.I32,None), None, ), # 2
  )

  def __init__(self, domain=None, key=None,):
    self.domain = domain
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.key = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = iprot.readI32();
            self.key.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multiGetInt_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    if self.key != None:
      oprot.writeFieldBegin('key', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.key))
      for iter57 in self.key:
        oprot.writeI32(iter57)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class multiGetInt_result:
  """
  Attributes:
   - success
   - dnfe
   - hde
   - dnle
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Value, Value.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'dnfe', (DomainNotFoundException, DomainNotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'hde', (HostsDownException, HostsDownException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'dnle', (DomainNotLoadedException, DomainNotLoadedException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, dnfe=None, hde=None, dnle=None,):
    self.success = success
    self.dnfe = dnfe
    self.hde = hde
    self.dnle = dnle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype61, _size58) = iprot.readListBegin()
          for _i62 in xrange(_size58):
            _elem63 = Value()
            _elem63.read(iprot)
            self.success.append(_elem63)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dnfe = DomainNotFoundException()
          self.dnfe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.hde = HostsDownException()
          self.hde.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.dnle = DomainNotLoadedException()
          self.dnle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multiGetInt_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter64 in self.success:
        iter64.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dnfe != None:
      oprot.writeFieldBegin('dnfe', TType.STRUCT, 1)
      self.dnfe.write(oprot)
      oprot.writeFieldEnd()
    if self.hde != None:
      oprot.writeFieldBegin('hde', TType.STRUCT, 2)
      self.hde.write(oprot)
      oprot.writeFieldEnd()
    if self.dnle != None:
      oprot.writeFieldBegin('dnle', TType.STRUCT, 3)
      self.dnle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class multiGetLong_args:
  """
  Attributes:
   - domain
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.LIST, 'key', (TType.I64,None), None, ), # 2
  )

  def __init__(self, domain=None, key=None,):
    self.domain = domain
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.key = []
          (_etype68, _size65) = iprot.readListBegin()
          for _i69 in xrange(_size65):
            _elem70 = iprot.readI64();
            self.key.append(_elem70)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multiGetLong_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    if self.key != None:
      oprot.writeFieldBegin('key', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.key))
      for iter71 in self.key:
        oprot.writeI64(iter71)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class multiGetLong_result:
  """
  Attributes:
   - success
   - dnfe
   - hde
   - dnle
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Value, Value.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'dnfe', (DomainNotFoundException, DomainNotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'hde', (HostsDownException, HostsDownException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'dnle', (DomainNotLoadedException, DomainNotLoadedException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, dnfe=None, hde=None, dnle=None,):
    self.success = success
    self.dnfe = dnfe
    self.hde = hde
    self.dnle = dnle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = Value()
            _elem77.read(iprot)
            self.success.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dnfe = DomainNotFoundException()
          self.dnfe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.hde = HostsDownException()
          self.hde.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.dnle = DomainNotLoadedException()
          self.dnle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('multiGetLong_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter78 in self.success:
        iter78.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dnfe != None:
      oprot.writeFieldBegin('dnfe', TType.STRUCT, 1)
      self.dnfe.write(oprot)
      oprot.writeFieldEnd()
    if self.hde != None:
      oprot.writeFieldBegin('hde', TType.STRUCT, 2)
      self.hde.write(oprot)
      oprot.writeFieldEnd()
    if self.dnle != None:
      oprot.writeFieldBegin('dnle', TType.STRUCT, 3)
      self.dnle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class directMultiGet_args:
  """
  Attributes:
   - domain
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.LIST, 'key', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, domain=None, key=None,):
    self.domain = domain
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.key = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = iprot.readString();
            self.key.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('directMultiGet_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    if self.key != None:
      oprot.writeFieldBegin('key', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.key))
      for iter85 in self.key:
        oprot.writeString(iter85);
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class directMultiGet_result:
  """
  Attributes:
   - success
   - dnfe
   - dnle
   - whe
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Value, Value.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'dnfe', (DomainNotFoundException, DomainNotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'dnle', (DomainNotLoadedException, DomainNotLoadedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'whe', (WrongHostException, WrongHostException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, dnfe=None, dnle=None, whe=None,):
    self.success = success
    self.dnfe = dnfe
    self.dnle = dnle
    self.whe = whe

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype89, _size86) = iprot.readListBegin()
          for _i90 in xrange(_size86):
            _elem91 = Value()
            _elem91.read(iprot)
            self.success.append(_elem91)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.dnfe = DomainNotFoundException()
          self.dnfe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dnle = DomainNotLoadedException()
          self.dnle.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.whe = WrongHostException()
          self.whe.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('directMultiGet_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter92 in self.success:
        iter92.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dnfe != None:
      oprot.writeFieldBegin('dnfe', TType.STRUCT, 1)
      self.dnfe.write(oprot)
      oprot.writeFieldEnd()
    if self.dnle != None:
      oprot.writeFieldBegin('dnle', TType.STRUCT, 2)
      self.dnle.write(oprot)
      oprot.writeFieldEnd()
    if self.whe != None:
      oprot.writeFieldBegin('whe', TType.STRUCT, 3)
      self.whe.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getDomainStatus_args:
  """
  Attributes:
   - domain
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
  )

  def __init__(self, domain=None,):
    self.domain = domain

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDomainStatus_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getDomainStatus_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DomainStatus, DomainStatus.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DomainStatus()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDomainStatus_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getDomains_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDomains_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getDomains_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype96, _size93) = iprot.readListBegin()
          for _i97 in xrange(_size93):
            _elem98 = iprot.readString().decode('utf-8');
            self.success.append(_elem98)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDomains_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter99 in self.success:
        oprot.writeString(iter99.encode('utf-8'));
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getStatus_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStatus_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class getStatus_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Status, Status.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Status()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStatus_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class isFullyLoaded_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isFullyLoaded_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class isFullyLoaded_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isFullyLoaded_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class isUpdating_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isUpdating_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class isUpdating_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isUpdating_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class updateAll_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateAll_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class updateAll_result:
  """
  Attributes:
   - ice
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ice', (InvalidConfigurationException, InvalidConfigurationException.thrift_spec), None, ), # 1
  )

  def __init__(self, ice=None,):
    self.ice = ice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ice = InvalidConfigurationException()
          self.ice.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateAll_result')
    if self.ice != None:
      oprot.writeFieldBegin('ice', TType.STRUCT, 1)
      self.ice.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class update_args:
  """
  Attributes:
   - domain
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
  )

  def __init__(self, domain=None,):
    self.domain = domain

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString().decode('utf-8');
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('update_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain.encode('utf-8'));
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx

class update_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('update_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def union_value(self):
    d = self.__dict__
    for key in d:
      val = d[key]
      if not val is None:
        return val

  def get_set_field(self):
    for attr in self.__dict__:
      if not self.__dict__[attr] is None:
        return attr

  def get_set_field_id(self):
    for idx, tup in enumerate(self.__class__.thrift_spec):
      if tup:
        key = tup[2]
        if not self.__dict__[key] is None:
          return idx


