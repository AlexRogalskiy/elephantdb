/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package elephantdb.generated.keyval;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ElephantDB {

  public interface Iface extends elephantdb.generated.ElephantDBShared.Iface {

    public elephantdb.generated.Value get(String domain, ByteBuffer key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException;

    public elephantdb.generated.Value getString(String domain, String key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException;

    public elephantdb.generated.Value getInt(String domain, int key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException;

    public elephantdb.generated.Value getLong(String domain, long key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException;

    public List<elephantdb.generated.Value> multiGet(String domain, List<ByteBuffer> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException;

    public List<elephantdb.generated.Value> multiGetString(String domain, List<String> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException;

    public List<elephantdb.generated.Value> multiGetInt(String domain, List<Integer> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException;

    public List<elephantdb.generated.Value> multiGetLong(String domain, List<Long> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException;

    public List<elephantdb.generated.Value> directMultiGet(String domain, List<ByteBuffer> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException;

    public List<elephantdb.generated.Value> directKryoMultiGet(String domain, List<ByteBuffer> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException;

  }

  public interface AsyncIface extends elephantdb.generated.ElephantDBShared .AsyncIface {

    public void get(String domain, ByteBuffer key, org.apache.thrift7.async.AsyncMethodCallback<AsyncClient.get_call> resultHandler) throws org.apache.thrift7.TException;

    public void getString(String domain, String key, org.apache.thrift7.async.AsyncMethodCallback<AsyncClient.getString_call> resultHandler) throws org.apache.thrift7.TException;

    public void getInt(String domain, int key, org.apache.thrift7.async.AsyncMethodCallback<AsyncClient.getInt_call> resultHandler) throws org.apache.thrift7.TException;

    public void getLong(String domain, long key, org.apache.thrift7.async.AsyncMethodCallback<AsyncClient.getLong_call> resultHandler) throws org.apache.thrift7.TException;

    public void multiGet(String domain, List<ByteBuffer> key, org.apache.thrift7.async.AsyncMethodCallback<AsyncClient.multiGet_call> resultHandler) throws org.apache.thrift7.TException;

    public void multiGetString(String domain, List<String> key, org.apache.thrift7.async.AsyncMethodCallback<AsyncClient.multiGetString_call> resultHandler) throws org.apache.thrift7.TException;

    public void multiGetInt(String domain, List<Integer> key, org.apache.thrift7.async.AsyncMethodCallback<AsyncClient.multiGetInt_call> resultHandler) throws org.apache.thrift7.TException;

    public void multiGetLong(String domain, List<Long> key, org.apache.thrift7.async.AsyncMethodCallback<AsyncClient.multiGetLong_call> resultHandler) throws org.apache.thrift7.TException;

    public void directMultiGet(String domain, List<ByteBuffer> key, org.apache.thrift7.async.AsyncMethodCallback<AsyncClient.directMultiGet_call> resultHandler) throws org.apache.thrift7.TException;

    public void directKryoMultiGet(String domain, List<ByteBuffer> key, org.apache.thrift7.async.AsyncMethodCallback<AsyncClient.directKryoMultiGet_call> resultHandler) throws org.apache.thrift7.TException;

  }

  public static class Client extends elephantdb.generated.ElephantDBShared.Client implements Iface {
    public static class Factory implements org.apache.thrift7.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift7.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift7.protocol.TProtocol iprot, org.apache.thrift7.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift7.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift7.protocol.TProtocol iprot, org.apache.thrift7.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public elephantdb.generated.Value get(String domain, ByteBuffer key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      send_get(domain, key);
      return recv_get();
    }

    public void send_get(String domain, ByteBuffer key) throws org.apache.thrift7.TException
    {
      get_args args = new get_args();
      args.set_domain(domain);
      args.set_key(key);
      sendBase("get", args);
    }

    public elephantdb.generated.Value recv_get() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      get_result result = new get_result();
      receiveBase(result, "get");
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new org.apache.thrift7.TApplicationException(org.apache.thrift7.TApplicationException.MISSING_RESULT, "get failed: unknown result");
    }

    public elephantdb.generated.Value getString(String domain, String key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      send_getString(domain, key);
      return recv_getString();
    }

    public void send_getString(String domain, String key) throws org.apache.thrift7.TException
    {
      getString_args args = new getString_args();
      args.set_domain(domain);
      args.set_key(key);
      sendBase("getString", args);
    }

    public elephantdb.generated.Value recv_getString() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      getString_result result = new getString_result();
      receiveBase(result, "getString");
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new org.apache.thrift7.TApplicationException(org.apache.thrift7.TApplicationException.MISSING_RESULT, "getString failed: unknown result");
    }

    public elephantdb.generated.Value getInt(String domain, int key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      send_getInt(domain, key);
      return recv_getInt();
    }

    public void send_getInt(String domain, int key) throws org.apache.thrift7.TException
    {
      getInt_args args = new getInt_args();
      args.set_domain(domain);
      args.set_key(key);
      sendBase("getInt", args);
    }

    public elephantdb.generated.Value recv_getInt() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      getInt_result result = new getInt_result();
      receiveBase(result, "getInt");
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new org.apache.thrift7.TApplicationException(org.apache.thrift7.TApplicationException.MISSING_RESULT, "getInt failed: unknown result");
    }

    public elephantdb.generated.Value getLong(String domain, long key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      send_getLong(domain, key);
      return recv_getLong();
    }

    public void send_getLong(String domain, long key) throws org.apache.thrift7.TException
    {
      getLong_args args = new getLong_args();
      args.set_domain(domain);
      args.set_key(key);
      sendBase("getLong", args);
    }

    public elephantdb.generated.Value recv_getLong() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      getLong_result result = new getLong_result();
      receiveBase(result, "getLong");
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new org.apache.thrift7.TApplicationException(org.apache.thrift7.TApplicationException.MISSING_RESULT, "getLong failed: unknown result");
    }

    public List<elephantdb.generated.Value> multiGet(String domain, List<ByteBuffer> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      send_multiGet(domain, key);
      return recv_multiGet();
    }

    public void send_multiGet(String domain, List<ByteBuffer> key) throws org.apache.thrift7.TException
    {
      multiGet_args args = new multiGet_args();
      args.set_domain(domain);
      args.set_key(key);
      sendBase("multiGet", args);
    }

    public List<elephantdb.generated.Value> recv_multiGet() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      multiGet_result result = new multiGet_result();
      receiveBase(result, "multiGet");
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new org.apache.thrift7.TApplicationException(org.apache.thrift7.TApplicationException.MISSING_RESULT, "multiGet failed: unknown result");
    }

    public List<elephantdb.generated.Value> multiGetString(String domain, List<String> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      send_multiGetString(domain, key);
      return recv_multiGetString();
    }

    public void send_multiGetString(String domain, List<String> key) throws org.apache.thrift7.TException
    {
      multiGetString_args args = new multiGetString_args();
      args.set_domain(domain);
      args.set_key(key);
      sendBase("multiGetString", args);
    }

    public List<elephantdb.generated.Value> recv_multiGetString() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      multiGetString_result result = new multiGetString_result();
      receiveBase(result, "multiGetString");
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new org.apache.thrift7.TApplicationException(org.apache.thrift7.TApplicationException.MISSING_RESULT, "multiGetString failed: unknown result");
    }

    public List<elephantdb.generated.Value> multiGetInt(String domain, List<Integer> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      send_multiGetInt(domain, key);
      return recv_multiGetInt();
    }

    public void send_multiGetInt(String domain, List<Integer> key) throws org.apache.thrift7.TException
    {
      multiGetInt_args args = new multiGetInt_args();
      args.set_domain(domain);
      args.set_key(key);
      sendBase("multiGetInt", args);
    }

    public List<elephantdb.generated.Value> recv_multiGetInt() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      multiGetInt_result result = new multiGetInt_result();
      receiveBase(result, "multiGetInt");
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new org.apache.thrift7.TApplicationException(org.apache.thrift7.TApplicationException.MISSING_RESULT, "multiGetInt failed: unknown result");
    }

    public List<elephantdb.generated.Value> multiGetLong(String domain, List<Long> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      send_multiGetLong(domain, key);
      return recv_multiGetLong();
    }

    public void send_multiGetLong(String domain, List<Long> key) throws org.apache.thrift7.TException
    {
      multiGetLong_args args = new multiGetLong_args();
      args.set_domain(domain);
      args.set_key(key);
      sendBase("multiGetLong", args);
    }

    public List<elephantdb.generated.Value> recv_multiGetLong() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      multiGetLong_result result = new multiGetLong_result();
      receiveBase(result, "multiGetLong");
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new org.apache.thrift7.TApplicationException(org.apache.thrift7.TApplicationException.MISSING_RESULT, "multiGetLong failed: unknown result");
    }

    public List<elephantdb.generated.Value> directMultiGet(String domain, List<ByteBuffer> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      send_directMultiGet(domain, key);
      return recv_directMultiGet();
    }

    public void send_directMultiGet(String domain, List<ByteBuffer> key) throws org.apache.thrift7.TException
    {
      directMultiGet_args args = new directMultiGet_args();
      args.set_domain(domain);
      args.set_key(key);
      sendBase("directMultiGet", args);
    }

    public List<elephantdb.generated.Value> recv_directMultiGet() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      directMultiGet_result result = new directMultiGet_result();
      receiveBase(result, "directMultiGet");
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new org.apache.thrift7.TApplicationException(org.apache.thrift7.TApplicationException.MISSING_RESULT, "directMultiGet failed: unknown result");
    }

    public List<elephantdb.generated.Value> directKryoMultiGet(String domain, List<ByteBuffer> key) throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      send_directKryoMultiGet(domain, key);
      return recv_directKryoMultiGet();
    }

    public void send_directKryoMultiGet(String domain, List<ByteBuffer> key) throws org.apache.thrift7.TException
    {
      directKryoMultiGet_args args = new directKryoMultiGet_args();
      args.set_domain(domain);
      args.set_key(key);
      sendBase("directKryoMultiGet", args);
    }

    public List<elephantdb.generated.Value> recv_directKryoMultiGet() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException
    {
      directKryoMultiGet_result result = new directKryoMultiGet_result();
      receiveBase(result, "directKryoMultiGet");
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new org.apache.thrift7.TApplicationException(org.apache.thrift7.TApplicationException.MISSING_RESULT, "directKryoMultiGet failed: unknown result");
    }

  }
  public static class AsyncClient extends elephantdb.generated.ElephantDBShared.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift7.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift7.async.TAsyncClientManager clientManager;
      private org.apache.thrift7.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift7.async.TAsyncClientManager clientManager, org.apache.thrift7.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift7.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.async.TAsyncClientManager clientManager, org.apache.thrift7.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void get(String domain, ByteBuffer key, org.apache.thrift7.async.AsyncMethodCallback<get_call> resultHandler) throws org.apache.thrift7.TException {
      checkReady();
      get_call method_call = new get_call(domain, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_call extends org.apache.thrift7.async.TAsyncMethodCall {
      private String domain;
      private ByteBuffer key;
      public get_call(String domain, ByteBuffer key, org.apache.thrift7.async.AsyncMethodCallback<get_call> resultHandler, org.apache.thrift7.async.TAsyncClient client, org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.transport.TNonblockingTransport transport) throws org.apache.thrift7.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(org.apache.thrift7.protocol.TProtocol prot) throws org.apache.thrift7.TException {
        prot.writeMessageBegin(new org.apache.thrift7.protocol.TMessage("get", org.apache.thrift7.protocol.TMessageType.CALL, 0));
        get_args args = new get_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public elephantdb.generated.Value getResult() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException {
        if (getState() != org.apache.thrift7.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift7.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift7.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift7.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get();
      }
    }

    public void getString(String domain, String key, org.apache.thrift7.async.AsyncMethodCallback<getString_call> resultHandler) throws org.apache.thrift7.TException {
      checkReady();
      getString_call method_call = new getString_call(domain, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getString_call extends org.apache.thrift7.async.TAsyncMethodCall {
      private String domain;
      private String key;
      public getString_call(String domain, String key, org.apache.thrift7.async.AsyncMethodCallback<getString_call> resultHandler, org.apache.thrift7.async.TAsyncClient client, org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.transport.TNonblockingTransport transport) throws org.apache.thrift7.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(org.apache.thrift7.protocol.TProtocol prot) throws org.apache.thrift7.TException {
        prot.writeMessageBegin(new org.apache.thrift7.protocol.TMessage("getString", org.apache.thrift7.protocol.TMessageType.CALL, 0));
        getString_args args = new getString_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public elephantdb.generated.Value getResult() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException {
        if (getState() != org.apache.thrift7.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift7.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift7.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift7.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getString();
      }
    }

    public void getInt(String domain, int key, org.apache.thrift7.async.AsyncMethodCallback<getInt_call> resultHandler) throws org.apache.thrift7.TException {
      checkReady();
      getInt_call method_call = new getInt_call(domain, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInt_call extends org.apache.thrift7.async.TAsyncMethodCall {
      private String domain;
      private int key;
      public getInt_call(String domain, int key, org.apache.thrift7.async.AsyncMethodCallback<getInt_call> resultHandler, org.apache.thrift7.async.TAsyncClient client, org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.transport.TNonblockingTransport transport) throws org.apache.thrift7.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(org.apache.thrift7.protocol.TProtocol prot) throws org.apache.thrift7.TException {
        prot.writeMessageBegin(new org.apache.thrift7.protocol.TMessage("getInt", org.apache.thrift7.protocol.TMessageType.CALL, 0));
        getInt_args args = new getInt_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public elephantdb.generated.Value getResult() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException {
        if (getState() != org.apache.thrift7.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift7.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift7.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift7.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInt();
      }
    }

    public void getLong(String domain, long key, org.apache.thrift7.async.AsyncMethodCallback<getLong_call> resultHandler) throws org.apache.thrift7.TException {
      checkReady();
      getLong_call method_call = new getLong_call(domain, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLong_call extends org.apache.thrift7.async.TAsyncMethodCall {
      private String domain;
      private long key;
      public getLong_call(String domain, long key, org.apache.thrift7.async.AsyncMethodCallback<getLong_call> resultHandler, org.apache.thrift7.async.TAsyncClient client, org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.transport.TNonblockingTransport transport) throws org.apache.thrift7.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(org.apache.thrift7.protocol.TProtocol prot) throws org.apache.thrift7.TException {
        prot.writeMessageBegin(new org.apache.thrift7.protocol.TMessage("getLong", org.apache.thrift7.protocol.TMessageType.CALL, 0));
        getLong_args args = new getLong_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public elephantdb.generated.Value getResult() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException {
        if (getState() != org.apache.thrift7.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift7.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift7.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift7.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLong();
      }
    }

    public void multiGet(String domain, List<ByteBuffer> key, org.apache.thrift7.async.AsyncMethodCallback<multiGet_call> resultHandler) throws org.apache.thrift7.TException {
      checkReady();
      multiGet_call method_call = new multiGet_call(domain, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiGet_call extends org.apache.thrift7.async.TAsyncMethodCall {
      private String domain;
      private List<ByteBuffer> key;
      public multiGet_call(String domain, List<ByteBuffer> key, org.apache.thrift7.async.AsyncMethodCallback<multiGet_call> resultHandler, org.apache.thrift7.async.TAsyncClient client, org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.transport.TNonblockingTransport transport) throws org.apache.thrift7.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(org.apache.thrift7.protocol.TProtocol prot) throws org.apache.thrift7.TException {
        prot.writeMessageBegin(new org.apache.thrift7.protocol.TMessage("multiGet", org.apache.thrift7.protocol.TMessageType.CALL, 0));
        multiGet_args args = new multiGet_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<elephantdb.generated.Value> getResult() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException {
        if (getState() != org.apache.thrift7.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift7.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift7.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift7.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiGet();
      }
    }

    public void multiGetString(String domain, List<String> key, org.apache.thrift7.async.AsyncMethodCallback<multiGetString_call> resultHandler) throws org.apache.thrift7.TException {
      checkReady();
      multiGetString_call method_call = new multiGetString_call(domain, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiGetString_call extends org.apache.thrift7.async.TAsyncMethodCall {
      private String domain;
      private List<String> key;
      public multiGetString_call(String domain, List<String> key, org.apache.thrift7.async.AsyncMethodCallback<multiGetString_call> resultHandler, org.apache.thrift7.async.TAsyncClient client, org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.transport.TNonblockingTransport transport) throws org.apache.thrift7.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(org.apache.thrift7.protocol.TProtocol prot) throws org.apache.thrift7.TException {
        prot.writeMessageBegin(new org.apache.thrift7.protocol.TMessage("multiGetString", org.apache.thrift7.protocol.TMessageType.CALL, 0));
        multiGetString_args args = new multiGetString_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<elephantdb.generated.Value> getResult() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException {
        if (getState() != org.apache.thrift7.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift7.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift7.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift7.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiGetString();
      }
    }

    public void multiGetInt(String domain, List<Integer> key, org.apache.thrift7.async.AsyncMethodCallback<multiGetInt_call> resultHandler) throws org.apache.thrift7.TException {
      checkReady();
      multiGetInt_call method_call = new multiGetInt_call(domain, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiGetInt_call extends org.apache.thrift7.async.TAsyncMethodCall {
      private String domain;
      private List<Integer> key;
      public multiGetInt_call(String domain, List<Integer> key, org.apache.thrift7.async.AsyncMethodCallback<multiGetInt_call> resultHandler, org.apache.thrift7.async.TAsyncClient client, org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.transport.TNonblockingTransport transport) throws org.apache.thrift7.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(org.apache.thrift7.protocol.TProtocol prot) throws org.apache.thrift7.TException {
        prot.writeMessageBegin(new org.apache.thrift7.protocol.TMessage("multiGetInt", org.apache.thrift7.protocol.TMessageType.CALL, 0));
        multiGetInt_args args = new multiGetInt_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<elephantdb.generated.Value> getResult() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException {
        if (getState() != org.apache.thrift7.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift7.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift7.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift7.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiGetInt();
      }
    }

    public void multiGetLong(String domain, List<Long> key, org.apache.thrift7.async.AsyncMethodCallback<multiGetLong_call> resultHandler) throws org.apache.thrift7.TException {
      checkReady();
      multiGetLong_call method_call = new multiGetLong_call(domain, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiGetLong_call extends org.apache.thrift7.async.TAsyncMethodCall {
      private String domain;
      private List<Long> key;
      public multiGetLong_call(String domain, List<Long> key, org.apache.thrift7.async.AsyncMethodCallback<multiGetLong_call> resultHandler, org.apache.thrift7.async.TAsyncClient client, org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.transport.TNonblockingTransport transport) throws org.apache.thrift7.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(org.apache.thrift7.protocol.TProtocol prot) throws org.apache.thrift7.TException {
        prot.writeMessageBegin(new org.apache.thrift7.protocol.TMessage("multiGetLong", org.apache.thrift7.protocol.TMessageType.CALL, 0));
        multiGetLong_args args = new multiGetLong_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<elephantdb.generated.Value> getResult() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException {
        if (getState() != org.apache.thrift7.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift7.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift7.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift7.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiGetLong();
      }
    }

    public void directMultiGet(String domain, List<ByteBuffer> key, org.apache.thrift7.async.AsyncMethodCallback<directMultiGet_call> resultHandler) throws org.apache.thrift7.TException {
      checkReady();
      directMultiGet_call method_call = new directMultiGet_call(domain, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class directMultiGet_call extends org.apache.thrift7.async.TAsyncMethodCall {
      private String domain;
      private List<ByteBuffer> key;
      public directMultiGet_call(String domain, List<ByteBuffer> key, org.apache.thrift7.async.AsyncMethodCallback<directMultiGet_call> resultHandler, org.apache.thrift7.async.TAsyncClient client, org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.transport.TNonblockingTransport transport) throws org.apache.thrift7.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(org.apache.thrift7.protocol.TProtocol prot) throws org.apache.thrift7.TException {
        prot.writeMessageBegin(new org.apache.thrift7.protocol.TMessage("directMultiGet", org.apache.thrift7.protocol.TMessageType.CALL, 0));
        directMultiGet_args args = new directMultiGet_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<elephantdb.generated.Value> getResult() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException {
        if (getState() != org.apache.thrift7.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift7.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift7.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift7.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_directMultiGet();
      }
    }

    public void directKryoMultiGet(String domain, List<ByteBuffer> key, org.apache.thrift7.async.AsyncMethodCallback<directKryoMultiGet_call> resultHandler) throws org.apache.thrift7.TException {
      checkReady();
      directKryoMultiGet_call method_call = new directKryoMultiGet_call(domain, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class directKryoMultiGet_call extends org.apache.thrift7.async.TAsyncMethodCall {
      private String domain;
      private List<ByteBuffer> key;
      public directKryoMultiGet_call(String domain, List<ByteBuffer> key, org.apache.thrift7.async.AsyncMethodCallback<directKryoMultiGet_call> resultHandler, org.apache.thrift7.async.TAsyncClient client, org.apache.thrift7.protocol.TProtocolFactory protocolFactory, org.apache.thrift7.transport.TNonblockingTransport transport) throws org.apache.thrift7.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(org.apache.thrift7.protocol.TProtocol prot) throws org.apache.thrift7.TException {
        prot.writeMessageBegin(new org.apache.thrift7.protocol.TMessage("directKryoMultiGet", org.apache.thrift7.protocol.TMessageType.CALL, 0));
        directKryoMultiGet_args args = new directKryoMultiGet_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<elephantdb.generated.Value> getResult() throws elephantdb.generated.DomainNotFoundException, elephantdb.generated.HostsDownException, elephantdb.generated.DomainNotLoadedException, org.apache.thrift7.TException {
        if (getState() != org.apache.thrift7.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift7.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift7.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift7.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_directKryoMultiGet();
      }
    }

  }

  public static class Processor<I extends Iface> extends elephantdb.generated.ElephantDBShared.Processor implements org.apache.thrift7.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift7.ProcessFunction<I, ? extends org.apache.thrift7.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift7.ProcessFunction<I, ? extends  org.apache.thrift7.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift7.ProcessFunction<I, ? extends  org.apache.thrift7.TBase>> getProcessMap(Map<String,  org.apache.thrift7.ProcessFunction<I, ? extends  org.apache.thrift7.TBase>> processMap) {
      processMap.put("get", new get());
      processMap.put("getString", new getString());
      processMap.put("getInt", new getInt());
      processMap.put("getLong", new getLong());
      processMap.put("multiGet", new multiGet());
      processMap.put("multiGetString", new multiGetString());
      processMap.put("multiGetInt", new multiGetInt());
      processMap.put("multiGetLong", new multiGetLong());
      processMap.put("directMultiGet", new directMultiGet());
      processMap.put("directKryoMultiGet", new directKryoMultiGet());
      return processMap;
    }

    private static class get<I extends Iface> extends org.apache.thrift7.ProcessFunction<I, get_args> {
      public get() {
        super("get");
      }

      protected get_args getEmptyArgsInstance() {
        return new get_args();
      }

      protected get_result getResult(I iface, get_args args) throws org.apache.thrift7.TException {
        get_result result = new get_result();
        try {
          result.success = iface.get(args.domain, args.key);
        } catch (elephantdb.generated.DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (elephantdb.generated.HostsDownException hde) {
          result.hde = hde;
        } catch (elephantdb.generated.DomainNotLoadedException dnle) {
          result.dnle = dnle;
        }
        return result;
      }
    }

    private static class getString<I extends Iface> extends org.apache.thrift7.ProcessFunction<I, getString_args> {
      public getString() {
        super("getString");
      }

      protected getString_args getEmptyArgsInstance() {
        return new getString_args();
      }

      protected getString_result getResult(I iface, getString_args args) throws org.apache.thrift7.TException {
        getString_result result = new getString_result();
        try {
          result.success = iface.getString(args.domain, args.key);
        } catch (elephantdb.generated.DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (elephantdb.generated.HostsDownException hde) {
          result.hde = hde;
        } catch (elephantdb.generated.DomainNotLoadedException dnle) {
          result.dnle = dnle;
        }
        return result;
      }
    }

    private static class getInt<I extends Iface> extends org.apache.thrift7.ProcessFunction<I, getInt_args> {
      public getInt() {
        super("getInt");
      }

      protected getInt_args getEmptyArgsInstance() {
        return new getInt_args();
      }

      protected getInt_result getResult(I iface, getInt_args args) throws org.apache.thrift7.TException {
        getInt_result result = new getInt_result();
        try {
          result.success = iface.getInt(args.domain, args.key);
        } catch (elephantdb.generated.DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (elephantdb.generated.HostsDownException hde) {
          result.hde = hde;
        } catch (elephantdb.generated.DomainNotLoadedException dnle) {
          result.dnle = dnle;
        }
        return result;
      }
    }

    private static class getLong<I extends Iface> extends org.apache.thrift7.ProcessFunction<I, getLong_args> {
      public getLong() {
        super("getLong");
      }

      protected getLong_args getEmptyArgsInstance() {
        return new getLong_args();
      }

      protected getLong_result getResult(I iface, getLong_args args) throws org.apache.thrift7.TException {
        getLong_result result = new getLong_result();
        try {
          result.success = iface.getLong(args.domain, args.key);
        } catch (elephantdb.generated.DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (elephantdb.generated.HostsDownException hde) {
          result.hde = hde;
        } catch (elephantdb.generated.DomainNotLoadedException dnle) {
          result.dnle = dnle;
        }
        return result;
      }
    }

    private static class multiGet<I extends Iface> extends org.apache.thrift7.ProcessFunction<I, multiGet_args> {
      public multiGet() {
        super("multiGet");
      }

      protected multiGet_args getEmptyArgsInstance() {
        return new multiGet_args();
      }

      protected multiGet_result getResult(I iface, multiGet_args args) throws org.apache.thrift7.TException {
        multiGet_result result = new multiGet_result();
        try {
          result.success = iface.multiGet(args.domain, args.key);
        } catch (elephantdb.generated.DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (elephantdb.generated.HostsDownException hde) {
          result.hde = hde;
        } catch (elephantdb.generated.DomainNotLoadedException dnle) {
          result.dnle = dnle;
        }
        return result;
      }
    }

    private static class multiGetString<I extends Iface> extends org.apache.thrift7.ProcessFunction<I, multiGetString_args> {
      public multiGetString() {
        super("multiGetString");
      }

      protected multiGetString_args getEmptyArgsInstance() {
        return new multiGetString_args();
      }

      protected multiGetString_result getResult(I iface, multiGetString_args args) throws org.apache.thrift7.TException {
        multiGetString_result result = new multiGetString_result();
        try {
          result.success = iface.multiGetString(args.domain, args.key);
        } catch (elephantdb.generated.DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (elephantdb.generated.HostsDownException hde) {
          result.hde = hde;
        } catch (elephantdb.generated.DomainNotLoadedException dnle) {
          result.dnle = dnle;
        }
        return result;
      }
    }

    private static class multiGetInt<I extends Iface> extends org.apache.thrift7.ProcessFunction<I, multiGetInt_args> {
      public multiGetInt() {
        super("multiGetInt");
      }

      protected multiGetInt_args getEmptyArgsInstance() {
        return new multiGetInt_args();
      }

      protected multiGetInt_result getResult(I iface, multiGetInt_args args) throws org.apache.thrift7.TException {
        multiGetInt_result result = new multiGetInt_result();
        try {
          result.success = iface.multiGetInt(args.domain, args.key);
        } catch (elephantdb.generated.DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (elephantdb.generated.HostsDownException hde) {
          result.hde = hde;
        } catch (elephantdb.generated.DomainNotLoadedException dnle) {
          result.dnle = dnle;
        }
        return result;
      }
    }

    private static class multiGetLong<I extends Iface> extends org.apache.thrift7.ProcessFunction<I, multiGetLong_args> {
      public multiGetLong() {
        super("multiGetLong");
      }

      protected multiGetLong_args getEmptyArgsInstance() {
        return new multiGetLong_args();
      }

      protected multiGetLong_result getResult(I iface, multiGetLong_args args) throws org.apache.thrift7.TException {
        multiGetLong_result result = new multiGetLong_result();
        try {
          result.success = iface.multiGetLong(args.domain, args.key);
        } catch (elephantdb.generated.DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (elephantdb.generated.HostsDownException hde) {
          result.hde = hde;
        } catch (elephantdb.generated.DomainNotLoadedException dnle) {
          result.dnle = dnle;
        }
        return result;
      }
    }

    private static class directMultiGet<I extends Iface> extends org.apache.thrift7.ProcessFunction<I, directMultiGet_args> {
      public directMultiGet() {
        super("directMultiGet");
      }

      protected directMultiGet_args getEmptyArgsInstance() {
        return new directMultiGet_args();
      }

      protected directMultiGet_result getResult(I iface, directMultiGet_args args) throws org.apache.thrift7.TException {
        directMultiGet_result result = new directMultiGet_result();
        try {
          result.success = iface.directMultiGet(args.domain, args.key);
        } catch (elephantdb.generated.DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (elephantdb.generated.HostsDownException hde) {
          result.hde = hde;
        } catch (elephantdb.generated.DomainNotLoadedException dnle) {
          result.dnle = dnle;
        }
        return result;
      }
    }

    private static class directKryoMultiGet<I extends Iface> extends org.apache.thrift7.ProcessFunction<I, directKryoMultiGet_args> {
      public directKryoMultiGet() {
        super("directKryoMultiGet");
      }

      protected directKryoMultiGet_args getEmptyArgsInstance() {
        return new directKryoMultiGet_args();
      }

      protected directKryoMultiGet_result getResult(I iface, directKryoMultiGet_args args) throws org.apache.thrift7.TException {
        directKryoMultiGet_result result = new directKryoMultiGet_result();
        try {
          result.success = iface.directKryoMultiGet(args.domain, args.key);
        } catch (elephantdb.generated.DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (elephantdb.generated.HostsDownException hde) {
          result.hde = hde;
        } catch (elephantdb.generated.DomainNotLoadedException dnle) {
          result.dnle = dnle;
        }
        return result;
      }
    }

  }

  public static class get_args implements org.apache.thrift7.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("get_args");

    private static final org.apache.thrift7.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift7.protocol.TField("domain", org.apache.thrift7.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift7.protocol.TField KEY_FIELD_DESC = new org.apache.thrift7.protocol.TField("key", org.apache.thrift7.protocol.TType.STRING, (short)2);

    private String domain; // required
    private ByteBuffer key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift7.meta_data.FieldMetaData("domain", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift7.meta_data.FieldMetaData("key", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
    }

    public get_args() {
    }

    public get_args(
      String domain,
      ByteBuffer key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_args(get_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        this.key = org.apache.thrift7.TBaseHelper.copyBinary(other.key);
;
      }
    }

    public get_args deepCopy() {
      return new get_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
      this.key = null;
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public byte[] get_key() {
      set_key(org.apache.thrift7.TBaseHelper.rightSize(key));
      return key == null ? null : key.array();
    }

    public ByteBuffer buffer_for_key() {
      return key;
    }

    public void set_key(byte[] key) {
      set_key(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
    }

    public void set_key(ByteBuffer key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_args)
        return this.equals((get_args)that);
      return false;
    }

    public boolean equals(get_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_args typedOther = (get_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.key = iprot.readBinary();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBinary(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        org.apache.thrift7.TBaseHelper.toString(this.key, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_result implements org.apache.thrift7.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("get_result");

    private static final org.apache.thrift7.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift7.protocol.TField("success", org.apache.thrift7.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift7.protocol.TField DNFE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnfe", org.apache.thrift7.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift7.protocol.TField HDE_FIELD_DESC = new org.apache.thrift7.protocol.TField("hde", org.apache.thrift7.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift7.protocol.TField DNLE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnle", org.apache.thrift7.protocol.TType.STRUCT, (short)3);

    private elephantdb.generated.Value success; // required
    private elephantdb.generated.DomainNotFoundException dnfe; // required
    private elephantdb.generated.HostsDownException hde; // required
    private elephantdb.generated.DomainNotLoadedException dnle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift7.meta_data.FieldMetaData("success", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, elephantdb.generated.Value.class)));
      tmpMap.put(_Fields.DNFE, new org.apache.thrift7.meta_data.FieldMetaData("dnfe", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new org.apache.thrift7.meta_data.FieldMetaData("hde", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new org.apache.thrift7.meta_data.FieldMetaData("dnle", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
    }

    public get_result() {
    }

    public get_result(
      elephantdb.generated.Value success,
      elephantdb.generated.DomainNotFoundException dnfe,
      elephantdb.generated.HostsDownException hde,
      elephantdb.generated.DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_result(get_result other) {
      if (other.is_set_success()) {
        this.success = new elephantdb.generated.Value(other.success);
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new elephantdb.generated.DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new elephantdb.generated.HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new elephantdb.generated.DomainNotLoadedException(other.dnle);
      }
    }

    public get_result deepCopy() {
      return new get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dnfe = null;
      this.hde = null;
      this.dnle = null;
    }

    public elephantdb.generated.Value get_success() {
      return this.success;
    }

    public void set_success(elephantdb.generated.Value success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public elephantdb.generated.DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(elephantdb.generated.DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public elephantdb.generated.HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(elephantdb.generated.HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been assigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public elephantdb.generated.DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(elephantdb.generated.DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((elephantdb.generated.Value)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((elephantdb.generated.DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((elephantdb.generated.HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((elephantdb.generated.DomainNotLoadedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_result)
        return this.equals((get_result)that);
      return false;
    }

    public boolean equals(get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_result typedOther = (get_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.success = new elephantdb.generated.Value();
              this.success.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnfe = new elephantdb.generated.DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.hde = new elephantdb.generated.HostsDownException();
              this.hde.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnle = new elephantdb.generated.DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getString_args implements org.apache.thrift7.TBase<getString_args, getString_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("getString_args");

    private static final org.apache.thrift7.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift7.protocol.TField("domain", org.apache.thrift7.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift7.protocol.TField KEY_FIELD_DESC = new org.apache.thrift7.protocol.TField("key", org.apache.thrift7.protocol.TType.STRING, (short)2);

    private String domain; // required
    private String key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift7.meta_data.FieldMetaData("domain", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift7.meta_data.FieldMetaData("key", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(getString_args.class, metaDataMap);
    }

    public getString_args() {
    }

    public getString_args(
      String domain,
      String key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getString_args(getString_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        this.key = other.key;
      }
    }

    public getString_args deepCopy() {
      return new getString_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
      this.key = null;
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public String get_key() {
      return this.key;
    }

    public void set_key(String key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getString_args)
        return this.equals((getString_args)that);
      return false;
    }

    public boolean equals(getString_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(getString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getString_args typedOther = (getString_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.key = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getString_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getString_result implements org.apache.thrift7.TBase<getString_result, getString_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("getString_result");

    private static final org.apache.thrift7.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift7.protocol.TField("success", org.apache.thrift7.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift7.protocol.TField DNFE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnfe", org.apache.thrift7.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift7.protocol.TField HDE_FIELD_DESC = new org.apache.thrift7.protocol.TField("hde", org.apache.thrift7.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift7.protocol.TField DNLE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnle", org.apache.thrift7.protocol.TType.STRUCT, (short)3);

    private elephantdb.generated.Value success; // required
    private elephantdb.generated.DomainNotFoundException dnfe; // required
    private elephantdb.generated.HostsDownException hde; // required
    private elephantdb.generated.DomainNotLoadedException dnle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift7.meta_data.FieldMetaData("success", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, elephantdb.generated.Value.class)));
      tmpMap.put(_Fields.DNFE, new org.apache.thrift7.meta_data.FieldMetaData("dnfe", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new org.apache.thrift7.meta_data.FieldMetaData("hde", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new org.apache.thrift7.meta_data.FieldMetaData("dnle", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(getString_result.class, metaDataMap);
    }

    public getString_result() {
    }

    public getString_result(
      elephantdb.generated.Value success,
      elephantdb.generated.DomainNotFoundException dnfe,
      elephantdb.generated.HostsDownException hde,
      elephantdb.generated.DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getString_result(getString_result other) {
      if (other.is_set_success()) {
        this.success = new elephantdb.generated.Value(other.success);
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new elephantdb.generated.DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new elephantdb.generated.HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new elephantdb.generated.DomainNotLoadedException(other.dnle);
      }
    }

    public getString_result deepCopy() {
      return new getString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dnfe = null;
      this.hde = null;
      this.dnle = null;
    }

    public elephantdb.generated.Value get_success() {
      return this.success;
    }

    public void set_success(elephantdb.generated.Value success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public elephantdb.generated.DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(elephantdb.generated.DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public elephantdb.generated.HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(elephantdb.generated.HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been assigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public elephantdb.generated.DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(elephantdb.generated.DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((elephantdb.generated.Value)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((elephantdb.generated.DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((elephantdb.generated.HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((elephantdb.generated.DomainNotLoadedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getString_result)
        return this.equals((getString_result)that);
      return false;
    }

    public boolean equals(getString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(getString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getString_result typedOther = (getString_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.success = new elephantdb.generated.Value();
              this.success.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnfe = new elephantdb.generated.DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.hde = new elephantdb.generated.HostsDownException();
              this.hde.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnle = new elephantdb.generated.DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getInt_args implements org.apache.thrift7.TBase<getInt_args, getInt_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("getInt_args");

    private static final org.apache.thrift7.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift7.protocol.TField("domain", org.apache.thrift7.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift7.protocol.TField KEY_FIELD_DESC = new org.apache.thrift7.protocol.TField("key", org.apache.thrift7.protocol.TType.I32, (short)2);

    private String domain; // required
    private int key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift7.meta_data.FieldMetaData("domain", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift7.meta_data.FieldMetaData("key", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(getInt_args.class, metaDataMap);
    }

    public getInt_args() {
    }

    public getInt_args(
      String domain,
      int key)
    {
      this();
      this.domain = domain;
      this.key = key;
      set_key_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInt_args(getInt_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      this.key = other.key;
    }

    public getInt_args deepCopy() {
      return new getInt_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
      set_key_isSet(false);
      this.key = 0;
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key() {
      return this.key;
    }

    public void set_key(int key) {
      this.key = key;
      set_key_isSet(true);
    }

    public void unset_key() {
      __isset_bit_vector.clear(__KEY_ISSET_ID);
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean is_set_key() {
      return __isset_bit_vector.get(__KEY_ISSET_ID);
    }

    public void set_key_isSet(boolean value) {
      __isset_bit_vector.set(__KEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return Integer.valueOf(get_key());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInt_args)
        return this.equals((getInt_args)that);
      return false;
    }

    public boolean equals(getInt_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true;
      boolean that_present_key = true;
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (this.key != that.key)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true;
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(getInt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInt_args typedOther = (getInt_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == org.apache.thrift7.protocol.TType.I32) {
              this.key = iprot.readI32();
              set_key_isSet(true);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeI32(this.key);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInt_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      sb.append(this.key);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getInt_result implements org.apache.thrift7.TBase<getInt_result, getInt_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("getInt_result");

    private static final org.apache.thrift7.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift7.protocol.TField("success", org.apache.thrift7.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift7.protocol.TField DNFE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnfe", org.apache.thrift7.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift7.protocol.TField HDE_FIELD_DESC = new org.apache.thrift7.protocol.TField("hde", org.apache.thrift7.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift7.protocol.TField DNLE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnle", org.apache.thrift7.protocol.TType.STRUCT, (short)3);

    private elephantdb.generated.Value success; // required
    private elephantdb.generated.DomainNotFoundException dnfe; // required
    private elephantdb.generated.HostsDownException hde; // required
    private elephantdb.generated.DomainNotLoadedException dnle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift7.meta_data.FieldMetaData("success", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, elephantdb.generated.Value.class)));
      tmpMap.put(_Fields.DNFE, new org.apache.thrift7.meta_data.FieldMetaData("dnfe", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new org.apache.thrift7.meta_data.FieldMetaData("hde", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new org.apache.thrift7.meta_data.FieldMetaData("dnle", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(getInt_result.class, metaDataMap);
    }

    public getInt_result() {
    }

    public getInt_result(
      elephantdb.generated.Value success,
      elephantdb.generated.DomainNotFoundException dnfe,
      elephantdb.generated.HostsDownException hde,
      elephantdb.generated.DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInt_result(getInt_result other) {
      if (other.is_set_success()) {
        this.success = new elephantdb.generated.Value(other.success);
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new elephantdb.generated.DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new elephantdb.generated.HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new elephantdb.generated.DomainNotLoadedException(other.dnle);
      }
    }

    public getInt_result deepCopy() {
      return new getInt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dnfe = null;
      this.hde = null;
      this.dnle = null;
    }

    public elephantdb.generated.Value get_success() {
      return this.success;
    }

    public void set_success(elephantdb.generated.Value success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public elephantdb.generated.DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(elephantdb.generated.DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public elephantdb.generated.HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(elephantdb.generated.HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been assigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public elephantdb.generated.DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(elephantdb.generated.DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((elephantdb.generated.Value)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((elephantdb.generated.DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((elephantdb.generated.HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((elephantdb.generated.DomainNotLoadedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInt_result)
        return this.equals((getInt_result)that);
      return false;
    }

    public boolean equals(getInt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(getInt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInt_result typedOther = (getInt_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.success = new elephantdb.generated.Value();
              this.success.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnfe = new elephantdb.generated.DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.hde = new elephantdb.generated.HostsDownException();
              this.hde.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnle = new elephantdb.generated.DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getLong_args implements org.apache.thrift7.TBase<getLong_args, getLong_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("getLong_args");

    private static final org.apache.thrift7.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift7.protocol.TField("domain", org.apache.thrift7.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift7.protocol.TField KEY_FIELD_DESC = new org.apache.thrift7.protocol.TField("key", org.apache.thrift7.protocol.TType.I64, (short)2);

    private String domain; // required
    private long key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift7.meta_data.FieldMetaData("domain", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift7.meta_data.FieldMetaData("key", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(getLong_args.class, metaDataMap);
    }

    public getLong_args() {
    }

    public getLong_args(
      String domain,
      long key)
    {
      this();
      this.domain = domain;
      this.key = key;
      set_key_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLong_args(getLong_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      this.key = other.key;
    }

    public getLong_args deepCopy() {
      return new getLong_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
      set_key_isSet(false);
      this.key = 0;
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public long get_key() {
      return this.key;
    }

    public void set_key(long key) {
      this.key = key;
      set_key_isSet(true);
    }

    public void unset_key() {
      __isset_bit_vector.clear(__KEY_ISSET_ID);
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean is_set_key() {
      return __isset_bit_vector.get(__KEY_ISSET_ID);
    }

    public void set_key_isSet(boolean value) {
      __isset_bit_vector.set(__KEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return Long.valueOf(get_key());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLong_args)
        return this.equals((getLong_args)that);
      return false;
    }

    public boolean equals(getLong_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true;
      boolean that_present_key = true;
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (this.key != that.key)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true;
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(getLong_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLong_args typedOther = (getLong_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == org.apache.thrift7.protocol.TType.I64) {
              this.key = iprot.readI64();
              set_key_isSet(true);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeI64(this.key);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLong_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      sb.append(this.key);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getLong_result implements org.apache.thrift7.TBase<getLong_result, getLong_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("getLong_result");

    private static final org.apache.thrift7.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift7.protocol.TField("success", org.apache.thrift7.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift7.protocol.TField DNFE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnfe", org.apache.thrift7.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift7.protocol.TField HDE_FIELD_DESC = new org.apache.thrift7.protocol.TField("hde", org.apache.thrift7.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift7.protocol.TField DNLE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnle", org.apache.thrift7.protocol.TType.STRUCT, (short)3);

    private elephantdb.generated.Value success; // required
    private elephantdb.generated.DomainNotFoundException dnfe; // required
    private elephantdb.generated.HostsDownException hde; // required
    private elephantdb.generated.DomainNotLoadedException dnle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift7.meta_data.FieldMetaData("success", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, elephantdb.generated.Value.class)));
      tmpMap.put(_Fields.DNFE, new org.apache.thrift7.meta_data.FieldMetaData("dnfe", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new org.apache.thrift7.meta_data.FieldMetaData("hde", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new org.apache.thrift7.meta_data.FieldMetaData("dnle", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(getLong_result.class, metaDataMap);
    }

    public getLong_result() {
    }

    public getLong_result(
      elephantdb.generated.Value success,
      elephantdb.generated.DomainNotFoundException dnfe,
      elephantdb.generated.HostsDownException hde,
      elephantdb.generated.DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLong_result(getLong_result other) {
      if (other.is_set_success()) {
        this.success = new elephantdb.generated.Value(other.success);
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new elephantdb.generated.DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new elephantdb.generated.HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new elephantdb.generated.DomainNotLoadedException(other.dnle);
      }
    }

    public getLong_result deepCopy() {
      return new getLong_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dnfe = null;
      this.hde = null;
      this.dnle = null;
    }

    public elephantdb.generated.Value get_success() {
      return this.success;
    }

    public void set_success(elephantdb.generated.Value success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public elephantdb.generated.DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(elephantdb.generated.DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public elephantdb.generated.HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(elephantdb.generated.HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been assigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public elephantdb.generated.DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(elephantdb.generated.DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((elephantdb.generated.Value)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((elephantdb.generated.DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((elephantdb.generated.HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((elephantdb.generated.DomainNotLoadedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLong_result)
        return this.equals((getLong_result)that);
      return false;
    }

    public boolean equals(getLong_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(getLong_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLong_result typedOther = (getLong_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.success = new elephantdb.generated.Value();
              this.success.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnfe = new elephantdb.generated.DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.hde = new elephantdb.generated.HostsDownException();
              this.hde.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnle = new elephantdb.generated.DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLong_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class multiGet_args implements org.apache.thrift7.TBase<multiGet_args, multiGet_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("multiGet_args");

    private static final org.apache.thrift7.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift7.protocol.TField("domain", org.apache.thrift7.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift7.protocol.TField KEY_FIELD_DESC = new org.apache.thrift7.protocol.TField("key", org.apache.thrift7.protocol.TType.LIST, (short)2);

    private String domain; // required
    private List<ByteBuffer> key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift7.meta_data.FieldMetaData("domain", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift7.meta_data.FieldMetaData("key", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(multiGet_args.class, metaDataMap);
    }

    public multiGet_args() {
    }

    public multiGet_args(
      String domain,
      List<ByteBuffer> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGet_args(multiGet_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<ByteBuffer> __this__key = new ArrayList<ByteBuffer>();
        for (ByteBuffer other_element : other.key) {
          ByteBuffer temp_binary_element = org.apache.thrift7.TBaseHelper.copyBinary(other_element);
;
          __this__key.add(temp_binary_element);
        }
        this.key = __this__key;
      }
    }

    public multiGet_args deepCopy() {
      return new multiGet_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
      this.key = null;
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<ByteBuffer> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(ByteBuffer elem) {
      if (this.key == null) {
        this.key = new ArrayList<ByteBuffer>();
      }
      this.key.add(elem);
    }

    public List<ByteBuffer> get_key() {
      return this.key;
    }

    public void set_key(List<ByteBuffer> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGet_args)
        return this.equals((multiGet_args)that);
      return false;
    }

    public boolean equals(multiGet_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(multiGet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGet_args typedOther = (multiGet_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list0 = iprot.readListBegin();
                this.key = new ArrayList<ByteBuffer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ByteBuffer _elem2; // required
                  _elem2 = iprot.readBinary();
                  this.key.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRING, this.key.size()));
          for (ByteBuffer _iter3 : this.key)
          {
            oprot.writeBinary(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGet_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class multiGet_result implements org.apache.thrift7.TBase<multiGet_result, multiGet_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("multiGet_result");

    private static final org.apache.thrift7.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift7.protocol.TField("success", org.apache.thrift7.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift7.protocol.TField DNFE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnfe", org.apache.thrift7.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift7.protocol.TField HDE_FIELD_DESC = new org.apache.thrift7.protocol.TField("hde", org.apache.thrift7.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift7.protocol.TField DNLE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnle", org.apache.thrift7.protocol.TType.STRUCT, (short)3);

    private List<elephantdb.generated.Value> success; // required
    private elephantdb.generated.DomainNotFoundException dnfe; // required
    private elephantdb.generated.HostsDownException hde; // required
    private elephantdb.generated.DomainNotLoadedException dnle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift7.meta_data.FieldMetaData("success", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, elephantdb.generated.Value.class))));
      tmpMap.put(_Fields.DNFE, new org.apache.thrift7.meta_data.FieldMetaData("dnfe", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new org.apache.thrift7.meta_data.FieldMetaData("hde", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new org.apache.thrift7.meta_data.FieldMetaData("dnle", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(multiGet_result.class, metaDataMap);
    }

    public multiGet_result() {
    }

    public multiGet_result(
      List<elephantdb.generated.Value> success,
      elephantdb.generated.DomainNotFoundException dnfe,
      elephantdb.generated.HostsDownException hde,
      elephantdb.generated.DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGet_result(multiGet_result other) {
      if (other.is_set_success()) {
        List<elephantdb.generated.Value> __this__success = new ArrayList<elephantdb.generated.Value>();
        for (elephantdb.generated.Value other_element : other.success) {
          __this__success.add(new elephantdb.generated.Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new elephantdb.generated.DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new elephantdb.generated.HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new elephantdb.generated.DomainNotLoadedException(other.dnle);
      }
    }

    public multiGet_result deepCopy() {
      return new multiGet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dnfe = null;
      this.hde = null;
      this.dnle = null;
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<elephantdb.generated.Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(elephantdb.generated.Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<elephantdb.generated.Value>();
      }
      this.success.add(elem);
    }

    public List<elephantdb.generated.Value> get_success() {
      return this.success;
    }

    public void set_success(List<elephantdb.generated.Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public elephantdb.generated.DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(elephantdb.generated.DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public elephantdb.generated.HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(elephantdb.generated.HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been assigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public elephantdb.generated.DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(elephantdb.generated.DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<elephantdb.generated.Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((elephantdb.generated.DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((elephantdb.generated.HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((elephantdb.generated.DomainNotLoadedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGet_result)
        return this.equals((multiGet_result)that);
      return false;
    }

    public boolean equals(multiGet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(multiGet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGet_result typedOther = (multiGet_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list4 = iprot.readListBegin();
                this.success = new ArrayList<elephantdb.generated.Value>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  elephantdb.generated.Value _elem6; // required
                  _elem6 = new elephantdb.generated.Value();
                  _elem6.read(iprot);
                  this.success.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnfe = new elephantdb.generated.DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.hde = new elephantdb.generated.HostsDownException();
              this.hde.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnle = new elephantdb.generated.DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRUCT, this.success.size()));
          for (elephantdb.generated.Value _iter7 : this.success)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class multiGetString_args implements org.apache.thrift7.TBase<multiGetString_args, multiGetString_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("multiGetString_args");

    private static final org.apache.thrift7.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift7.protocol.TField("domain", org.apache.thrift7.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift7.protocol.TField KEY_FIELD_DESC = new org.apache.thrift7.protocol.TField("key", org.apache.thrift7.protocol.TType.LIST, (short)2);

    private String domain; // required
    private List<String> key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift7.meta_data.FieldMetaData("domain", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift7.meta_data.FieldMetaData("key", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(multiGetString_args.class, metaDataMap);
    }

    public multiGetString_args() {
    }

    public multiGetString_args(
      String domain,
      List<String> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetString_args(multiGetString_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<String> __this__key = new ArrayList<String>();
        for (String other_element : other.key) {
          __this__key.add(other_element);
        }
        this.key = __this__key;
      }
    }

    public multiGetString_args deepCopy() {
      return new multiGetString_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
      this.key = null;
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<String> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(String elem) {
      if (this.key == null) {
        this.key = new ArrayList<String>();
      }
      this.key.add(elem);
    }

    public List<String> get_key() {
      return this.key;
    }

    public void set_key(List<String> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetString_args)
        return this.equals((multiGetString_args)that);
      return false;
    }

    public boolean equals(multiGetString_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(multiGetString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetString_args typedOther = (multiGetString_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list8 = iprot.readListBegin();
                this.key = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  String _elem10; // required
                  _elem10 = iprot.readString();
                  this.key.add(_elem10);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRING, this.key.size()));
          for (String _iter11 : this.key)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetString_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class multiGetString_result implements org.apache.thrift7.TBase<multiGetString_result, multiGetString_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("multiGetString_result");

    private static final org.apache.thrift7.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift7.protocol.TField("success", org.apache.thrift7.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift7.protocol.TField DNFE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnfe", org.apache.thrift7.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift7.protocol.TField HDE_FIELD_DESC = new org.apache.thrift7.protocol.TField("hde", org.apache.thrift7.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift7.protocol.TField DNLE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnle", org.apache.thrift7.protocol.TType.STRUCT, (short)3);

    private List<elephantdb.generated.Value> success; // required
    private elephantdb.generated.DomainNotFoundException dnfe; // required
    private elephantdb.generated.HostsDownException hde; // required
    private elephantdb.generated.DomainNotLoadedException dnle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift7.meta_data.FieldMetaData("success", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, elephantdb.generated.Value.class))));
      tmpMap.put(_Fields.DNFE, new org.apache.thrift7.meta_data.FieldMetaData("dnfe", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new org.apache.thrift7.meta_data.FieldMetaData("hde", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new org.apache.thrift7.meta_data.FieldMetaData("dnle", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(multiGetString_result.class, metaDataMap);
    }

    public multiGetString_result() {
    }

    public multiGetString_result(
      List<elephantdb.generated.Value> success,
      elephantdb.generated.DomainNotFoundException dnfe,
      elephantdb.generated.HostsDownException hde,
      elephantdb.generated.DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetString_result(multiGetString_result other) {
      if (other.is_set_success()) {
        List<elephantdb.generated.Value> __this__success = new ArrayList<elephantdb.generated.Value>();
        for (elephantdb.generated.Value other_element : other.success) {
          __this__success.add(new elephantdb.generated.Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new elephantdb.generated.DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new elephantdb.generated.HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new elephantdb.generated.DomainNotLoadedException(other.dnle);
      }
    }

    public multiGetString_result deepCopy() {
      return new multiGetString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dnfe = null;
      this.hde = null;
      this.dnle = null;
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<elephantdb.generated.Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(elephantdb.generated.Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<elephantdb.generated.Value>();
      }
      this.success.add(elem);
    }

    public List<elephantdb.generated.Value> get_success() {
      return this.success;
    }

    public void set_success(List<elephantdb.generated.Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public elephantdb.generated.DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(elephantdb.generated.DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public elephantdb.generated.HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(elephantdb.generated.HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been assigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public elephantdb.generated.DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(elephantdb.generated.DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<elephantdb.generated.Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((elephantdb.generated.DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((elephantdb.generated.HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((elephantdb.generated.DomainNotLoadedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetString_result)
        return this.equals((multiGetString_result)that);
      return false;
    }

    public boolean equals(multiGetString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(multiGetString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetString_result typedOther = (multiGetString_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list12 = iprot.readListBegin();
                this.success = new ArrayList<elephantdb.generated.Value>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  elephantdb.generated.Value _elem14; // required
                  _elem14 = new elephantdb.generated.Value();
                  _elem14.read(iprot);
                  this.success.add(_elem14);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnfe = new elephantdb.generated.DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.hde = new elephantdb.generated.HostsDownException();
              this.hde.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnle = new elephantdb.generated.DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRUCT, this.success.size()));
          for (elephantdb.generated.Value _iter15 : this.success)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class multiGetInt_args implements org.apache.thrift7.TBase<multiGetInt_args, multiGetInt_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("multiGetInt_args");

    private static final org.apache.thrift7.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift7.protocol.TField("domain", org.apache.thrift7.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift7.protocol.TField KEY_FIELD_DESC = new org.apache.thrift7.protocol.TField("key", org.apache.thrift7.protocol.TType.LIST, (short)2);

    private String domain; // required
    private List<Integer> key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift7.meta_data.FieldMetaData("domain", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift7.meta_data.FieldMetaData("key", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(multiGetInt_args.class, metaDataMap);
    }

    public multiGetInt_args() {
    }

    public multiGetInt_args(
      String domain,
      List<Integer> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetInt_args(multiGetInt_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<Integer> __this__key = new ArrayList<Integer>();
        for (Integer other_element : other.key) {
          __this__key.add(other_element);
        }
        this.key = __this__key;
      }
    }

    public multiGetInt_args deepCopy() {
      return new multiGetInt_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
      this.key = null;
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<Integer> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(int elem) {
      if (this.key == null) {
        this.key = new ArrayList<Integer>();
      }
      this.key.add(elem);
    }

    public List<Integer> get_key() {
      return this.key;
    }

    public void set_key(List<Integer> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetInt_args)
        return this.equals((multiGetInt_args)that);
      return false;
    }

    public boolean equals(multiGetInt_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(multiGetInt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetInt_args typedOther = (multiGetInt_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list16 = iprot.readListBegin();
                this.key = new ArrayList<Integer>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  int _elem18; // required
                  _elem18 = iprot.readI32();
                  this.key.add(_elem18);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.I32, this.key.size()));
          for (int _iter19 : this.key)
          {
            oprot.writeI32(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetInt_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class multiGetInt_result implements org.apache.thrift7.TBase<multiGetInt_result, multiGetInt_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("multiGetInt_result");

    private static final org.apache.thrift7.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift7.protocol.TField("success", org.apache.thrift7.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift7.protocol.TField DNFE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnfe", org.apache.thrift7.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift7.protocol.TField HDE_FIELD_DESC = new org.apache.thrift7.protocol.TField("hde", org.apache.thrift7.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift7.protocol.TField DNLE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnle", org.apache.thrift7.protocol.TType.STRUCT, (short)3);

    private List<elephantdb.generated.Value> success; // required
    private elephantdb.generated.DomainNotFoundException dnfe; // required
    private elephantdb.generated.HostsDownException hde; // required
    private elephantdb.generated.DomainNotLoadedException dnle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift7.meta_data.FieldMetaData("success", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, elephantdb.generated.Value.class))));
      tmpMap.put(_Fields.DNFE, new org.apache.thrift7.meta_data.FieldMetaData("dnfe", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new org.apache.thrift7.meta_data.FieldMetaData("hde", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new org.apache.thrift7.meta_data.FieldMetaData("dnle", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(multiGetInt_result.class, metaDataMap);
    }

    public multiGetInt_result() {
    }

    public multiGetInt_result(
      List<elephantdb.generated.Value> success,
      elephantdb.generated.DomainNotFoundException dnfe,
      elephantdb.generated.HostsDownException hde,
      elephantdb.generated.DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetInt_result(multiGetInt_result other) {
      if (other.is_set_success()) {
        List<elephantdb.generated.Value> __this__success = new ArrayList<elephantdb.generated.Value>();
        for (elephantdb.generated.Value other_element : other.success) {
          __this__success.add(new elephantdb.generated.Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new elephantdb.generated.DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new elephantdb.generated.HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new elephantdb.generated.DomainNotLoadedException(other.dnle);
      }
    }

    public multiGetInt_result deepCopy() {
      return new multiGetInt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dnfe = null;
      this.hde = null;
      this.dnle = null;
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<elephantdb.generated.Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(elephantdb.generated.Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<elephantdb.generated.Value>();
      }
      this.success.add(elem);
    }

    public List<elephantdb.generated.Value> get_success() {
      return this.success;
    }

    public void set_success(List<elephantdb.generated.Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public elephantdb.generated.DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(elephantdb.generated.DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public elephantdb.generated.HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(elephantdb.generated.HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been assigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public elephantdb.generated.DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(elephantdb.generated.DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<elephantdb.generated.Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((elephantdb.generated.DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((elephantdb.generated.HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((elephantdb.generated.DomainNotLoadedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetInt_result)
        return this.equals((multiGetInt_result)that);
      return false;
    }

    public boolean equals(multiGetInt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(multiGetInt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetInt_result typedOther = (multiGetInt_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list20 = iprot.readListBegin();
                this.success = new ArrayList<elephantdb.generated.Value>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  elephantdb.generated.Value _elem22; // required
                  _elem22 = new elephantdb.generated.Value();
                  _elem22.read(iprot);
                  this.success.add(_elem22);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnfe = new elephantdb.generated.DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.hde = new elephantdb.generated.HostsDownException();
              this.hde.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnle = new elephantdb.generated.DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRUCT, this.success.size()));
          for (elephantdb.generated.Value _iter23 : this.success)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetInt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class multiGetLong_args implements org.apache.thrift7.TBase<multiGetLong_args, multiGetLong_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("multiGetLong_args");

    private static final org.apache.thrift7.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift7.protocol.TField("domain", org.apache.thrift7.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift7.protocol.TField KEY_FIELD_DESC = new org.apache.thrift7.protocol.TField("key", org.apache.thrift7.protocol.TType.LIST, (short)2);

    private String domain; // required
    private List<Long> key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift7.meta_data.FieldMetaData("domain", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift7.meta_data.FieldMetaData("key", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(multiGetLong_args.class, metaDataMap);
    }

    public multiGetLong_args() {
    }

    public multiGetLong_args(
      String domain,
      List<Long> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetLong_args(multiGetLong_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<Long> __this__key = new ArrayList<Long>();
        for (Long other_element : other.key) {
          __this__key.add(other_element);
        }
        this.key = __this__key;
      }
    }

    public multiGetLong_args deepCopy() {
      return new multiGetLong_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
      this.key = null;
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<Long> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(long elem) {
      if (this.key == null) {
        this.key = new ArrayList<Long>();
      }
      this.key.add(elem);
    }

    public List<Long> get_key() {
      return this.key;
    }

    public void set_key(List<Long> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetLong_args)
        return this.equals((multiGetLong_args)that);
      return false;
    }

    public boolean equals(multiGetLong_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(multiGetLong_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetLong_args typedOther = (multiGetLong_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list24 = iprot.readListBegin();
                this.key = new ArrayList<Long>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  long _elem26; // required
                  _elem26 = iprot.readI64();
                  this.key.add(_elem26);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.I64, this.key.size()));
          for (long _iter27 : this.key)
          {
            oprot.writeI64(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetLong_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class multiGetLong_result implements org.apache.thrift7.TBase<multiGetLong_result, multiGetLong_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("multiGetLong_result");

    private static final org.apache.thrift7.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift7.protocol.TField("success", org.apache.thrift7.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift7.protocol.TField DNFE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnfe", org.apache.thrift7.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift7.protocol.TField HDE_FIELD_DESC = new org.apache.thrift7.protocol.TField("hde", org.apache.thrift7.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift7.protocol.TField DNLE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnle", org.apache.thrift7.protocol.TType.STRUCT, (short)3);

    private List<elephantdb.generated.Value> success; // required
    private elephantdb.generated.DomainNotFoundException dnfe; // required
    private elephantdb.generated.HostsDownException hde; // required
    private elephantdb.generated.DomainNotLoadedException dnle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift7.meta_data.FieldMetaData("success", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, elephantdb.generated.Value.class))));
      tmpMap.put(_Fields.DNFE, new org.apache.thrift7.meta_data.FieldMetaData("dnfe", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new org.apache.thrift7.meta_data.FieldMetaData("hde", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new org.apache.thrift7.meta_data.FieldMetaData("dnle", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(multiGetLong_result.class, metaDataMap);
    }

    public multiGetLong_result() {
    }

    public multiGetLong_result(
      List<elephantdb.generated.Value> success,
      elephantdb.generated.DomainNotFoundException dnfe,
      elephantdb.generated.HostsDownException hde,
      elephantdb.generated.DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetLong_result(multiGetLong_result other) {
      if (other.is_set_success()) {
        List<elephantdb.generated.Value> __this__success = new ArrayList<elephantdb.generated.Value>();
        for (elephantdb.generated.Value other_element : other.success) {
          __this__success.add(new elephantdb.generated.Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new elephantdb.generated.DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new elephantdb.generated.HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new elephantdb.generated.DomainNotLoadedException(other.dnle);
      }
    }

    public multiGetLong_result deepCopy() {
      return new multiGetLong_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dnfe = null;
      this.hde = null;
      this.dnle = null;
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<elephantdb.generated.Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(elephantdb.generated.Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<elephantdb.generated.Value>();
      }
      this.success.add(elem);
    }

    public List<elephantdb.generated.Value> get_success() {
      return this.success;
    }

    public void set_success(List<elephantdb.generated.Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public elephantdb.generated.DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(elephantdb.generated.DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public elephantdb.generated.HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(elephantdb.generated.HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been assigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public elephantdb.generated.DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(elephantdb.generated.DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<elephantdb.generated.Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((elephantdb.generated.DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((elephantdb.generated.HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((elephantdb.generated.DomainNotLoadedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetLong_result)
        return this.equals((multiGetLong_result)that);
      return false;
    }

    public boolean equals(multiGetLong_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(multiGetLong_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetLong_result typedOther = (multiGetLong_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list28 = iprot.readListBegin();
                this.success = new ArrayList<elephantdb.generated.Value>(_list28.size);
                for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                {
                  elephantdb.generated.Value _elem30; // required
                  _elem30 = new elephantdb.generated.Value();
                  _elem30.read(iprot);
                  this.success.add(_elem30);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnfe = new elephantdb.generated.DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.hde = new elephantdb.generated.HostsDownException();
              this.hde.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnle = new elephantdb.generated.DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRUCT, this.success.size()));
          for (elephantdb.generated.Value _iter31 : this.success)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetLong_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class directMultiGet_args implements org.apache.thrift7.TBase<directMultiGet_args, directMultiGet_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("directMultiGet_args");

    private static final org.apache.thrift7.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift7.protocol.TField("domain", org.apache.thrift7.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift7.protocol.TField KEY_FIELD_DESC = new org.apache.thrift7.protocol.TField("key", org.apache.thrift7.protocol.TType.LIST, (short)2);

    private String domain; // required
    private List<ByteBuffer> key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift7.meta_data.FieldMetaData("domain", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift7.meta_data.FieldMetaData("key", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(directMultiGet_args.class, metaDataMap);
    }

    public directMultiGet_args() {
    }

    public directMultiGet_args(
      String domain,
      List<ByteBuffer> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public directMultiGet_args(directMultiGet_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<ByteBuffer> __this__key = new ArrayList<ByteBuffer>();
        for (ByteBuffer other_element : other.key) {
          ByteBuffer temp_binary_element = org.apache.thrift7.TBaseHelper.copyBinary(other_element);
;
          __this__key.add(temp_binary_element);
        }
        this.key = __this__key;
      }
    }

    public directMultiGet_args deepCopy() {
      return new directMultiGet_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
      this.key = null;
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<ByteBuffer> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(ByteBuffer elem) {
      if (this.key == null) {
        this.key = new ArrayList<ByteBuffer>();
      }
      this.key.add(elem);
    }

    public List<ByteBuffer> get_key() {
      return this.key;
    }

    public void set_key(List<ByteBuffer> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof directMultiGet_args)
        return this.equals((directMultiGet_args)that);
      return false;
    }

    public boolean equals(directMultiGet_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(directMultiGet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      directMultiGet_args typedOther = (directMultiGet_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list32 = iprot.readListBegin();
                this.key = new ArrayList<ByteBuffer>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  ByteBuffer _elem34; // required
                  _elem34 = iprot.readBinary();
                  this.key.add(_elem34);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRING, this.key.size()));
          for (ByteBuffer _iter35 : this.key)
          {
            oprot.writeBinary(_iter35);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("directMultiGet_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class directMultiGet_result implements org.apache.thrift7.TBase<directMultiGet_result, directMultiGet_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("directMultiGet_result");

    private static final org.apache.thrift7.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift7.protocol.TField("success", org.apache.thrift7.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift7.protocol.TField DNFE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnfe", org.apache.thrift7.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift7.protocol.TField HDE_FIELD_DESC = new org.apache.thrift7.protocol.TField("hde", org.apache.thrift7.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift7.protocol.TField DNLE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnle", org.apache.thrift7.protocol.TType.STRUCT, (short)3);

    private List<elephantdb.generated.Value> success; // required
    private elephantdb.generated.DomainNotFoundException dnfe; // required
    private elephantdb.generated.HostsDownException hde; // required
    private elephantdb.generated.DomainNotLoadedException dnle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift7.meta_data.FieldMetaData("success", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, elephantdb.generated.Value.class))));
      tmpMap.put(_Fields.DNFE, new org.apache.thrift7.meta_data.FieldMetaData("dnfe", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new org.apache.thrift7.meta_data.FieldMetaData("hde", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new org.apache.thrift7.meta_data.FieldMetaData("dnle", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(directMultiGet_result.class, metaDataMap);
    }

    public directMultiGet_result() {
    }

    public directMultiGet_result(
      List<elephantdb.generated.Value> success,
      elephantdb.generated.DomainNotFoundException dnfe,
      elephantdb.generated.HostsDownException hde,
      elephantdb.generated.DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public directMultiGet_result(directMultiGet_result other) {
      if (other.is_set_success()) {
        List<elephantdb.generated.Value> __this__success = new ArrayList<elephantdb.generated.Value>();
        for (elephantdb.generated.Value other_element : other.success) {
          __this__success.add(new elephantdb.generated.Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new elephantdb.generated.DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new elephantdb.generated.HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new elephantdb.generated.DomainNotLoadedException(other.dnle);
      }
    }

    public directMultiGet_result deepCopy() {
      return new directMultiGet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dnfe = null;
      this.hde = null;
      this.dnle = null;
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<elephantdb.generated.Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(elephantdb.generated.Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<elephantdb.generated.Value>();
      }
      this.success.add(elem);
    }

    public List<elephantdb.generated.Value> get_success() {
      return this.success;
    }

    public void set_success(List<elephantdb.generated.Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public elephantdb.generated.DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(elephantdb.generated.DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public elephantdb.generated.HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(elephantdb.generated.HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been assigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public elephantdb.generated.DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(elephantdb.generated.DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<elephantdb.generated.Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((elephantdb.generated.DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((elephantdb.generated.HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((elephantdb.generated.DomainNotLoadedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof directMultiGet_result)
        return this.equals((directMultiGet_result)that);
      return false;
    }

    public boolean equals(directMultiGet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(directMultiGet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      directMultiGet_result typedOther = (directMultiGet_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list36 = iprot.readListBegin();
                this.success = new ArrayList<elephantdb.generated.Value>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  elephantdb.generated.Value _elem38; // required
                  _elem38 = new elephantdb.generated.Value();
                  _elem38.read(iprot);
                  this.success.add(_elem38);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnfe = new elephantdb.generated.DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.hde = new elephantdb.generated.HostsDownException();
              this.hde.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnle = new elephantdb.generated.DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRUCT, this.success.size()));
          for (elephantdb.generated.Value _iter39 : this.success)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("directMultiGet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class directKryoMultiGet_args implements org.apache.thrift7.TBase<directKryoMultiGet_args, directKryoMultiGet_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("directKryoMultiGet_args");

    private static final org.apache.thrift7.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift7.protocol.TField("domain", org.apache.thrift7.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift7.protocol.TField KEY_FIELD_DESC = new org.apache.thrift7.protocol.TField("key", org.apache.thrift7.protocol.TType.LIST, (short)2);

    private String domain; // required
    private List<ByteBuffer> key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift7.meta_data.FieldMetaData("domain", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift7.meta_data.FieldMetaData("key", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(directKryoMultiGet_args.class, metaDataMap);
    }

    public directKryoMultiGet_args() {
    }

    public directKryoMultiGet_args(
      String domain,
      List<ByteBuffer> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public directKryoMultiGet_args(directKryoMultiGet_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<ByteBuffer> __this__key = new ArrayList<ByteBuffer>();
        for (ByteBuffer other_element : other.key) {
          ByteBuffer temp_binary_element = org.apache.thrift7.TBaseHelper.copyBinary(other_element);
;
          __this__key.add(temp_binary_element);
        }
        this.key = __this__key;
      }
    }

    public directKryoMultiGet_args deepCopy() {
      return new directKryoMultiGet_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
      this.key = null;
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<ByteBuffer> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(ByteBuffer elem) {
      if (this.key == null) {
        this.key = new ArrayList<ByteBuffer>();
      }
      this.key.add(elem);
    }

    public List<ByteBuffer> get_key() {
      return this.key;
    }

    public void set_key(List<ByteBuffer> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof directKryoMultiGet_args)
        return this.equals((directKryoMultiGet_args)that);
      return false;
    }

    public boolean equals(directKryoMultiGet_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(directKryoMultiGet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      directKryoMultiGet_args typedOther = (directKryoMultiGet_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == org.apache.thrift7.protocol.TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list40 = iprot.readListBegin();
                this.key = new ArrayList<ByteBuffer>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  ByteBuffer _elem42; // required
                  _elem42 = iprot.readBinary();
                  this.key.add(_elem42);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRING, this.key.size()));
          for (ByteBuffer _iter43 : this.key)
          {
            oprot.writeBinary(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("directKryoMultiGet_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class directKryoMultiGet_result implements org.apache.thrift7.TBase<directKryoMultiGet_result, directKryoMultiGet_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("directKryoMultiGet_result");

    private static final org.apache.thrift7.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift7.protocol.TField("success", org.apache.thrift7.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift7.protocol.TField DNFE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnfe", org.apache.thrift7.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift7.protocol.TField HDE_FIELD_DESC = new org.apache.thrift7.protocol.TField("hde", org.apache.thrift7.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift7.protocol.TField DNLE_FIELD_DESC = new org.apache.thrift7.protocol.TField("dnle", org.apache.thrift7.protocol.TType.STRUCT, (short)3);

    private List<elephantdb.generated.Value> success; // required
    private elephantdb.generated.DomainNotFoundException dnfe; // required
    private elephantdb.generated.HostsDownException hde; // required
    private elephantdb.generated.DomainNotLoadedException dnle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift7.meta_data.FieldMetaData("success", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
              new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, elephantdb.generated.Value.class))));
      tmpMap.put(_Fields.DNFE, new org.apache.thrift7.meta_data.FieldMetaData("dnfe", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new org.apache.thrift7.meta_data.FieldMetaData("hde", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new org.apache.thrift7.meta_data.FieldMetaData("dnle", org.apache.thrift7.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(directKryoMultiGet_result.class, metaDataMap);
    }

    public directKryoMultiGet_result() {
    }

    public directKryoMultiGet_result(
      List<elephantdb.generated.Value> success,
      elephantdb.generated.DomainNotFoundException dnfe,
      elephantdb.generated.HostsDownException hde,
      elephantdb.generated.DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public directKryoMultiGet_result(directKryoMultiGet_result other) {
      if (other.is_set_success()) {
        List<elephantdb.generated.Value> __this__success = new ArrayList<elephantdb.generated.Value>();
        for (elephantdb.generated.Value other_element : other.success) {
          __this__success.add(new elephantdb.generated.Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new elephantdb.generated.DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new elephantdb.generated.HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new elephantdb.generated.DomainNotLoadedException(other.dnle);
      }
    }

    public directKryoMultiGet_result deepCopy() {
      return new directKryoMultiGet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dnfe = null;
      this.hde = null;
      this.dnle = null;
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<elephantdb.generated.Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(elephantdb.generated.Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<elephantdb.generated.Value>();
      }
      this.success.add(elem);
    }

    public List<elephantdb.generated.Value> get_success() {
      return this.success;
    }

    public void set_success(List<elephantdb.generated.Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public elephantdb.generated.DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(elephantdb.generated.DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public elephantdb.generated.HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(elephantdb.generated.HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been assigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public elephantdb.generated.DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(elephantdb.generated.DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been assigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<elephantdb.generated.Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((elephantdb.generated.DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((elephantdb.generated.HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((elephantdb.generated.DomainNotLoadedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof directKryoMultiGet_result)
        return this.equals((directKryoMultiGet_result)that);
      return false;
    }

    public boolean equals(directKryoMultiGet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(directKryoMultiGet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      directKryoMultiGet_result typedOther = (directKryoMultiGet_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {
        lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
      org.apache.thrift7.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift7.protocol.TType.LIST) {
              {
                org.apache.thrift7.protocol.TList _list44 = iprot.readListBegin();
                this.success = new ArrayList<elephantdb.generated.Value>(_list44.size);
                for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                {
                  elephantdb.generated.Value _elem46; // required
                  _elem46 = new elephantdb.generated.Value();
                  _elem46.read(iprot);
                  this.success.add(_elem46);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnfe = new elephantdb.generated.DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.hde = new elephantdb.generated.HostsDownException();
              this.hde.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == org.apache.thrift7.protocol.TType.STRUCT) {
              this.dnle = new elephantdb.generated.DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRUCT, this.success.size()));
          for (elephantdb.generated.Value _iter47 : this.success)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("directKryoMultiGet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift7.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift7.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
